{
  "firstLayout": "",
  "gdVersion": {
    "build": 99,
    "major": 4,
    "minor": 0,
    "revision": 0
  },
  "properties": {
    "adaptGameResolutionAtRuntime": true,
    "folderProject": false,
    "orientation": "landscape",
    "packageName": "com.example.gamename",
    "pixelsRounding": false,
    "projectUuid": "7495a643-2d4d-43c3-92a4-6fa6c35695c2",
    "scaleMode": "nearest",
    "sizeOnStartupMode": "adaptWidth",
    "useDeprecatedZeroAsDefaultZOrder": true,
    "useExternalSourceFiles": false,
    "version": "1.0.0",
    "name": "Quirreldlc",
    "author": "",
    "windowWidth": 800,
    "windowHeight": 600,
    "latestCompilationDirectory": "",
    "maxFPS": 60,
    "minFPS": 20,
    "verticalSync": false,
    "platformSpecificAssets": {},
    "loadingScreen": {
      "backgroundColor": 0,
      "backgroundFadeInDuration": 0.2,
      "backgroundImageResourceName": "",
      "gdevelopLogoStyle": "light",
      "logoAndProgressFadeInDuration": 0.2,
      "logoAndProgressLogoFadeInDelay": 0.2,
      "minDuration": 1.5,
      "progressBarColor": 16777215,
      "progressBarHeight": 20,
      "progressBarMaxWidth": 200,
      "progressBarMinWidth": 40,
      "progressBarWidthPercent": 30,
      "showGDevelopSplash": true,
      "showProgressBar": true
    },
    "authorIds": [],
    "extensionProperties": [],
    "platforms": [
      {
        "name": "GDevelop JS platform"
      }
    ],
    "currentPlatform": "GDevelop JS platform"
  },
  "resources": {
    "resources": [
      {
        "alwaysLoaded": false,
        "file": "idle_1.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_2.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_2.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-2.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-1-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-2-0.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-2-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "1.png",
        "kind": "image",
        "metadata": "",
        "name": "1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "2.png",
        "kind": "image",
        "metadata": "",
        "name": "2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "3.png",
        "kind": "image",
        "metadata": "",
        "name": "3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "4.png",
        "kind": "image",
        "metadata": "",
        "name": "4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "12.png",
        "kind": "image",
        "metadata": "",
        "name": "12.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "22.png",
        "kind": "image",
        "metadata": "",
        "name": "22.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "32.png",
        "kind": "image",
        "metadata": "",
        "name": "32.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "5.png",
        "kind": "image",
        "metadata": "",
        "name": "5.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "1-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "1-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "1-3.png",
        "kind": "image",
        "metadata": "",
        "name": "1-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "walk-1.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "walk-2.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "walk-3.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "13.png",
        "kind": "image",
        "metadata": "",
        "name": "13.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "23.png",
        "kind": "image",
        "metadata": "",
        "name": "23.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "33.png",
        "kind": "image",
        "metadata": "",
        "name": "33.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "42.png",
        "kind": "image",
        "metadata": "",
        "name": "42.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "52.png",
        "kind": "image",
        "metadata": "",
        "name": "52.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-4.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-4.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-4.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-5.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-4.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-5.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-5.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-5.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-5.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-7.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-7.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-8.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-8.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-9.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-9.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-10.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-10.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "walk-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-1-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "walk-2-0.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-2-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "walk-3-0.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-3-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject-1-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "tumblr_e9b2d9c939a916497c06e0a342f94434_9f73b2f8_640.jpg",
        "kind": "image",
        "metadata": "",
        "name": "tumblr_e9b2d9c939a916497c06e0a342f94434_9f73b2f8_640.jpg",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject-1-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject-1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject-1-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "maxresdefault.jpg",
        "kind": "image",
        "metadata": "",
        "name": "maxresdefault.jpg",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Quirrel_dash.png",
        "kind": "image",
        "metadata": "",
        "name": "Quirrel_dash.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-1-0.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Quirrel_dash2.png",
        "kind": "image",
        "metadata": "",
        "name": "Quirrel_dash2.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Quirrel_dash2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Quirrel_dash2-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-1-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "idle_1-2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "idle_1-2-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "walk-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-1-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "walk-2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-2-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "walk-3-1.png",
        "kind": "image",
        "metadata": "",
        "name": "walk-3-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-3.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-4.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-5.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-5.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-6.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-7.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-7.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-8.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-8.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-9.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-9.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-10.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-10.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-11.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-11.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-12.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-12.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-13.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-13.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-14.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-14.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-1-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Quirrel_dash2-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "Quirrel_dash2-1-0.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Quirrel_dash2-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Quirrel_dash2-1-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-1-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-1-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-2-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-2-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-3-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-3-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-4-7.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-4-7.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-11.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-11.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-12.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-12.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Slash-5-6.png",
        "kind": "image",
        "metadata": "",
        "name": "Slash-5-6.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-1-2.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Dash-2.png",
        "kind": "image",
        "metadata": "",
        "name": "Dash-2.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject-1-3.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject-1-3.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject2-1.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "file": "NewFile.wav",
        "kind": "audio",
        "metadata": "{\"jfxr\":{\"data\":\"{\\\"_version\\\":1,\\\"_name\\\":\\\"Hit/hurt 98\\\",\\\"_locked\\\":[],\\\"sampleRate\\\":44100,\\\"attack\\\":0,\\\"sustain\\\":0.09,\\\"sustainPunch\\\":0,\\\"decay\\\":0.02,\\\"tremoloDepth\\\":0,\\\"tremoloFrequency\\\":10,\\\"frequency\\\":900,\\\"frequencySweep\\\":-700,\\\"frequencyDeltaSweep\\\":-400,\\\"repeatFrequency\\\":0,\\\"frequencyJump1Onset\\\":33,\\\"frequencyJump1Amount\\\":0,\\\"frequencyJump2Onset\\\":66,\\\"frequencyJump2Amount\\\":0,\\\"harmonics\\\":0,\\\"harmonicsFalloff\\\":0.5,\\\"waveform\\\":\\\"pinknoise\\\",\\\"interpolateNoise\\\":true,\\\"vibratoDepth\\\":0,\\\"vibratoFrequency\\\":10,\\\"squareDuty\\\":50,\\\"squareDutySweep\\\":0,\\\"flangerOffset\\\":0,\\\"flangerOffsetSweep\\\":0,\\\"bitCrush\\\":16,\\\"bitCrushSweep\\\":0,\\\"lowPassCutoff\\\":22050,\\\"lowPassCutoffSweep\\\":10100,\\\"highPassCutoff\\\":0,\\\"highPassCutoffSweep\\\":0,\\\"compression\\\":1,\\\"normalization\\\":true,\\\"amplification\\\":100}\",\"name\":\"NewFile\"}}",
        "name": "NewFile.wav",
        "preloadAsMusic": false,
        "preloadAsSound": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject2-1 - Copy.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject2-1 - Copy.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "8.png",
        "kind": "image",
        "metadata": "",
        "name": "8.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "11.png",
        "kind": "image",
        "metadata": "",
        "name": "11.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "122.png",
        "kind": "image",
        "metadata": "",
        "name": "122.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "132.png",
        "kind": "image",
        "metadata": "",
        "name": "132.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "14.png",
        "kind": "image",
        "metadata": "",
        "name": "14.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "15.png",
        "kind": "image",
        "metadata": "",
        "name": "15.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "16.png",
        "kind": "image",
        "metadata": "",
        "name": "16.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "17.png",
        "kind": "image",
        "metadata": "",
        "name": "17.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "18.png",
        "kind": "image",
        "metadata": "",
        "name": "18.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "19.png",
        "kind": "image",
        "metadata": "",
        "name": "19.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "20.png",
        "kind": "image",
        "metadata": "",
        "name": "20.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "21.png",
        "kind": "image",
        "metadata": "",
        "name": "21.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "222.png",
        "kind": "image",
        "metadata": "",
        "name": "222.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "ready-1.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-1.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-2.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-3.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-4.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-5.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-5.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-6.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-6.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-7.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-7.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-8.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-8.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-9.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-9.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-10.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-10.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-11.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-11.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-12.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-12.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-1-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-2-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-2-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-3-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-3-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-4-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-4-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-5-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-5-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-6-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-6-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-7-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-7-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-8-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-8-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-9-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-9-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-10-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-10-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-11-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-11-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "ready-12-0.png",
        "kind": "image",
        "metadata": "",
        "name": "ready-12-0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "223.png",
        "kind": "image",
        "metadata": "",
        "name": "223.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "0.png",
        "kind": "image",
        "metadata": "",
        "name": "0.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-2.png",
        "kind": "image",
        "metadata": "",
        "name": "load-2.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-3.png",
        "kind": "image",
        "metadata": "",
        "name": "load-3.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-4.png",
        "kind": "image",
        "metadata": "",
        "name": "load-4.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "24.png",
        "kind": "image",
        "metadata": "",
        "name": "24.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-6.png",
        "kind": "image",
        "metadata": "",
        "name": "load-6.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-7.png",
        "kind": "image",
        "metadata": "",
        "name": "load-7.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-8.png",
        "kind": "image",
        "metadata": "",
        "name": "load-8.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "34.png",
        "kind": "image",
        "metadata": "",
        "name": "34.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-10.png",
        "kind": "image",
        "metadata": "",
        "name": "load-10.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-11.png",
        "kind": "image",
        "metadata": "",
        "name": "load-11.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-12.png",
        "kind": "image",
        "metadata": "",
        "name": "load-12.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "43.png",
        "kind": "image",
        "metadata": "",
        "name": "43.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-14.png",
        "kind": "image",
        "metadata": "",
        "name": "load-14.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-15.png",
        "kind": "image",
        "metadata": "",
        "name": "load-15.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-16.png",
        "kind": "image",
        "metadata": "",
        "name": "load-16.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "53.png",
        "kind": "image",
        "metadata": "",
        "name": "53.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-18.png",
        "kind": "image",
        "metadata": "",
        "name": "load-18.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-19.png",
        "kind": "image",
        "metadata": "",
        "name": "load-19.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-20.png",
        "kind": "image",
        "metadata": "",
        "name": "load-20.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "6.png",
        "kind": "image",
        "metadata": "",
        "name": "6.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-22.png",
        "kind": "image",
        "metadata": "",
        "name": "load-22.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-23.png",
        "kind": "image",
        "metadata": "",
        "name": "load-23.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-24.png",
        "kind": "image",
        "metadata": "",
        "name": "load-24.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "7.png",
        "kind": "image",
        "metadata": "",
        "name": "7.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "load-26.png",
        "kind": "image",
        "metadata": "",
        "name": "load-26.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "9.png",
        "kind": "image",
        "metadata": "",
        "name": "9.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "10.png",
        "kind": "image",
        "metadata": "",
        "name": "10.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "112.png",
        "kind": "image",
        "metadata": "",
        "name": "112.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "123.png",
        "kind": "image",
        "metadata": "",
        "name": "123.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "133.png",
        "kind": "image",
        "metadata": "",
        "name": "133.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "142.png",
        "kind": "image",
        "metadata": "",
        "name": "142.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "152.png",
        "kind": "image",
        "metadata": "",
        "name": "152.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "162.png",
        "kind": "image",
        "metadata": "",
        "name": "162.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "172.png",
        "kind": "image",
        "metadata": "",
        "name": "172.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "182.png",
        "kind": "image",
        "metadata": "",
        "name": "182.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "192.png",
        "kind": "image",
        "metadata": "",
        "name": "192.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "202.png",
        "kind": "image",
        "metadata": "",
        "name": "202.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "212.png",
        "kind": "image",
        "metadata": "",
        "name": "212.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "224.png",
        "kind": "image",
        "metadata": "",
        "name": "224.png",
        "smoothed": true,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject2-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject2-1-0.png",
        "smoothed": true,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Shell_1.png",
        "kind": "image",
        "metadata": "",
        "name": "Shell_1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Shell_1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Shell_1-1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Shel_2.png",
        "kind": "image",
        "metadata": "",
        "name": "Shel_2.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Shel_2-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Shel_2-1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Shell_3.png",
        "kind": "image",
        "metadata": "",
        "name": "Shell_3.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Shell_3-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Shell_3-1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "shell_4.png",
        "kind": "image",
        "metadata": "",
        "name": "shell_4.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "shell_4-1.png",
        "kind": "image",
        "metadata": "",
        "name": "shell_4-1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Path_1.png",
        "kind": "image",
        "metadata": "",
        "name": "Path_1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "Path_12.png",
        "kind": "image",
        "metadata": "",
        "name": "Path_12.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Path_12-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Path_12-1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "Block-1.png",
        "kind": "image",
        "metadata": "",
        "name": "Block-1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject2-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject2-1-1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewObject2-1-2.png",
        "kind": "image",
        "metadata": "",
        "name": "NewObject2-1-2.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewFile-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewFile-1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "NewFile-1-1.png",
        "kind": "image",
        "metadata": "",
        "name": "NewFile-1-1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "file": "Trajan Pro.ttf",
        "kind": "font",
        "metadata": "",
        "name": "Trajan Pro.ttf",
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "02.png",
        "kind": "image",
        "metadata": "",
        "name": "02.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "110.png",
        "kind": "image",
        "metadata": "",
        "name": "110.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "25.png",
        "kind": "image",
        "metadata": "",
        "name": "25.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "35.png",
        "kind": "image",
        "metadata": "",
        "name": "35.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "44.png",
        "kind": "image",
        "metadata": "",
        "name": "44.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "54.png",
        "kind": "image",
        "metadata": "",
        "name": "54.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "62.png",
        "kind": "image",
        "metadata": "",
        "name": "62.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "72.png",
        "kind": "image",
        "metadata": "",
        "name": "72.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "82.png",
        "kind": "image",
        "metadata": "",
        "name": "82.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "92.png",
        "kind": "image",
        "metadata": "",
        "name": "92.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "102.png",
        "kind": "image",
        "metadata": "",
        "name": "102.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "113.png",
        "kind": "image",
        "metadata": "",
        "name": "113.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "124.png",
        "kind": "image",
        "metadata": "",
        "name": "124.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "134.png",
        "kind": "image",
        "metadata": "",
        "name": "134.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "143.png",
        "kind": "image",
        "metadata": "",
        "name": "143.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "73.png",
        "kind": "image",
        "metadata": "",
        "name": "73.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "74.png",
        "kind": "image",
        "metadata": "",
        "name": "74.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "NewFile-1-0.png",
        "kind": "image",
        "metadata": "",
        "name": "NewFile-1-0.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown1.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown1.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown2.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown2.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown3.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown3.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown4.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown4.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown5.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown5.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown6.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown6.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown7.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown7.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown8.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown8.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown9.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown9.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown10.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown10.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "cooldown102.png",
        "kind": "image",
        "metadata": "",
        "name": "cooldown102.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "loaded1.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded1.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "loaded2.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded2.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "loaded3.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded3.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "loaded4.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded4.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "loaded5.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded5.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "alwaysLoaded": false,
        "file": "loaded6.png",
        "kind": "image",
        "metadata": "",
        "name": "loaded6.png",
        "smoothed": false,
        "userAdded": true
      },
      {
        "alwaysLoaded": false,
        "file": "yep.png",
        "kind": "image",
        "metadata": "",
        "name": "yep.png",
        "smoothed": false,
        "userAdded": false
      },
      {
        "file": "Imran Khan - Satisfya (Official Music Video) (256  kbps).mp3",
        "kind": "audio",
        "metadata": "",
        "name": "Imran Khan - Satisfya (Official Music Video) (256  kbps).mp3",
        "preloadAsMusic": false,
        "preloadAsSound": false,
        "userAdded": true
      }
    ],
    "resourceFolders": []
  },
  "objects": [
    {
      "name": "Quirrel",
      "tags": "",
      "type": "Sprite",
      "updateIfNotVisible": false,
      "variables": [],
      "effects": [],
      "behaviors": [
        {
          "name": "PlatformerObject",
          "type": "PlatformBehavior::PlatformerObjectBehavior",
          "jumpSpeed": 600,
          "canGrabPlatforms": false,
          "ignoreDefaultControls": false,
          "gravity": 1000,
          "acceleration": 0,
          "deceleration": 0,
          "jumpSustainTime": 0.2,
          "ladderClimbingSpeed": 150,
          "maxFallingSpeed": 700,
          "maxSpeed": 250,
          "slopeMaxAngle": 60,
          "xGrabTolerance": 10,
          "yGrabOffset": 0
        }
      ],
      "animations": [
        {
          "name": "idle_1",
          "useMultipleDirections": false,
          "directions": [
            {
              "looping": true,
              "timeBetweenFrames": 1,
              "sprites": [
                {
                  "hasCustomCollisionMask": true,
                  "image": "idle_1-1-1.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 37.599998474121094,
                      "y": 101.5
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 35.849998474121094,
                    "y": 51.95000076293945
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 35.650001525878906,
                    "y": 51.95000076293945
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 70,
                        "y": 0
                      },
                      {
                        "x": 52.79999923706055,
                        "y": 105
                      },
                      {
                        "x": 26.399999618530273,
                        "y": 105
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "idle_1-2-1.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 37.599998474121094,
                      "y": 101.5
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 35.849998474121094,
                    "y": 51.95000076293945
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 35.650001525878906,
                    "y": 51.95000076293945
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 70,
                        "y": 0
                      },
                      {
                        "x": 48,
                        "y": 105
                      },
                      {
                        "x": 25.600000381469727,
                        "y": 105
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "walk",
          "useMultipleDirections": false,
          "directions": [
            {
              "looping": true,
              "timeBetweenFrames": 0.08,
              "sprites": [
                {
                  "hasCustomCollisionMask": true,
                  "image": "walk-1-1.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 36.599998474121094,
                      "y": 103
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 35.849998474121094,
                    "y": 51.95000076293945
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 35.650001525878906,
                    "y": 51.95000076293945
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 68,
                        "y": 3.0000100135803223
                      },
                      {
                        "x": 44.599998474121094,
                        "y": 108
                      },
                      {
                        "x": 25.399999618530273,
                        "y": 108
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "walk-2-1.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 36.599998474121094,
                      "y": 103
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 35.849998474121094,
                    "y": 51.95000076293945
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 35.650001525878906,
                    "y": 51.95000076293945
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 68,
                        "y": 3.0000100135803223
                      },
                      {
                        "x": 44.599998474121094,
                        "y": 108
                      },
                      {
                        "x": 25.399999618530273,
                        "y": 108
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "walk-3-1.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 36.599998474121094,
                      "y": 103
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 35.849998474121094,
                    "y": 51.95000076293945
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 35.650001525878906,
                    "y": 51.95000076293945
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 68,
                        "y": 3.0000100135803223
                      },
                      {
                        "x": 44.599998474121094,
                        "y": 108
                      },
                      {
                        "x": 25.399999618530273,
                        "y": 108
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Slash",
          "useMultipleDirections": false,
          "directions": [
            {
              "looping": false,
              "timeBetweenFrames": 0.04,
              "sprites": [
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-1-6.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 20.799999237060547,
                        "y": 63.79999923706055
                      },
                      {
                        "x": 92.80000305175781,
                        "y": 65.4000015258789
                      },
                      {
                        "x": 76.80000305175781,
                        "y": 100
                      },
                      {
                        "x": 51.20000076293945,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-2-6.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 20.799999237060547,
                        "y": 63.79999923706055
                      },
                      {
                        "x": 72.80000305175781,
                        "y": 61.400001525878906
                      },
                      {
                        "x": 77.5999984741211,
                        "y": 100
                      },
                      {
                        "x": 42.400001525878906,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-3-6.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 20.799999237060547,
                        "y": 63.79999923706055
                      },
                      {
                        "x": 88,
                        "y": 62.20000076293945
                      },
                      {
                        "x": 88,
                        "y": 100
                      },
                      {
                        "x": 43.20000076293945,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-4-7.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 53.599998474121094,
                        "y": 63
                      },
                      {
                        "x": 89.5999984741211,
                        "y": 64.5999984741211
                      },
                      {
                        "x": 79.19999694824219,
                        "y": 99.80000305175781
                      },
                      {
                        "x": 31.200000762939453,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-5-6.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 72,
                        "y": 48.599998474121094
                      },
                      {
                        "x": 110,
                        "y": 19
                      },
                      {
                        "x": 110,
                        "y": 40.599998474121094
                      },
                      {
                        "x": 74.4000015258789,
                        "y": 59
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-11.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 68.80000305175781,
                        "y": 55
                      },
                      {
                        "x": 110,
                        "y": 15
                      },
                      {
                        "x": 68.80000305175781,
                        "y": 100
                      },
                      {
                        "x": 29.600000381469727,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-12.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 67.19999694824219,
                        "y": 53.400001525878906
                      },
                      {
                        "x": 110,
                        "y": 16.600000381469727
                      },
                      {
                        "x": 71.19999694824219,
                        "y": 100
                      },
                      {
                        "x": 29.600000381469727,
                        "y": 100
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Slash-5-6.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 60.79999923706055,
                      "y": 95.80000305175781
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "centerPoint": {
                    "automatic": false,
                    "name": "centre",
                    "x": 53.599998474121094,
                    "y": 51.79999923706055
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 88.80000305175781,
                        "y": 33.400001525878906
                      },
                      {
                        "x": 110,
                        "y": 15.800000190734863
                      },
                      {
                        "x": 70.4000015258789,
                        "y": 100
                      },
                      {
                        "x": 26.399999618530273,
                        "y": 100
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Dash",
          "useMultipleDirections": false,
          "directions": [
            {
              "looping": false,
              "timeBetweenFrames": 0.045,
              "sprites": [
                {
                  "hasCustomCollisionMask": true,
                  "image": "Dash-1-2.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 42,
                      "y": 100.69999694824219
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 44.400001525878906,
                    "y": 50.29999923706055
                  },
                  "centerPoint": {
                    "automatic": true,
                    "name": "centre",
                    "x": 0,
                    "y": 0
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 90,
                        "y": 0
                      },
                      {
                        "x": 90,
                        "y": 97.5
                      },
                      {
                        "x": 0,
                        "y": 98.30000305175781
                      }
                    ]
                  ]
                },
                {
                  "hasCustomCollisionMask": true,
                  "image": "Dash-2.png",
                  "points": [
                    {
                      "name": "leg",
                      "x": 42,
                      "y": 100.69999694824219
                    }
                  ],
                  "originPoint": {
                    "name": "origine",
                    "x": 44.400001525878906,
                    "y": 50.29999923706055
                  },
                  "centerPoint": {
                    "automatic": true,
                    "name": "centre",
                    "x": 0,
                    "y": 0
                  },
                  "customCollisionMask": [
                    [
                      {
                        "x": 0,
                        "y": 0
                      },
                      {
                        "x": 90,
                        "y": 0
                      },
                      {
                        "x": 90,
                        "y": 97.5
                      },
                      {
                        "x": 0,
                        "y": 98.30000305175781
                      }
                    ]
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "objectsGroups": [],
  "variables": [
    {
      "name": "Movement",
      "type": "string",
      "value": "1"
    },
    {
      "name": "Soul",
      "type": "string",
      "value": "0"
    },
    {
      "name": "speedboost",
      "type": "string",
      "value": "0"
    }
  ],
  "layouts": [
    {
      "b": 51,
      "disableInputWhenNotFocused": true,
      "mangledName": "Prototype",
      "name": "Prototype",
      "oglFOV": 90,
      "oglZFar": 500,
      "oglZNear": 1,
      "r": 51,
      "standardSortMethod": true,
      "stopSoundsOnStartup": true,
      "title": "",
      "v": 51,
      "uiSettings": {
        "grid": false,
        "gridType": "rectangular",
        "gridWidth": 32,
        "gridHeight": 32,
        "gridOffsetX": 0,
        "gridOffsetY": 0,
        "gridColor": 10401023,
        "gridAlpha": 0.8,
        "snap": false,
        "zoomFactor": 0.26999999999999996,
        "windowMask": false
      },
      "objectsGroups": [],
      "variables": [],
      "instances": [
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "Quirrel",
          "persistentUuid": "7aefe982-1a7d-4bf9-825e-f35da608a35f",
          "width": 0,
          "x": -301.1499938964844,
          "y": 460.95001220703125,
          "zOrder": 21,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 576,
          "layer": "",
          "locked": false,
          "name": "platform",
          "persistentUuid": "2142f9e2-b284-4669-8258-906017cbb7a8",
          "width": 1445,
          "x": -470,
          "y": 524,
          "zOrder": 5,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 611,
          "layer": "",
          "locked": false,
          "name": "room1",
          "persistentUuid": "3c5c8c42-f66f-4a6c-9a04-bb0fdf2dd7b8",
          "width": 590,
          "x": -441,
          "y": -6,
          "zOrder": 0,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 616,
          "layer": "",
          "locked": false,
          "name": "room2",
          "persistentUuid": "b42e3c50-e8e8-4872-9f14-50c02108d125",
          "width": 362,
          "x": 147,
          "y": -4,
          "zOrder": 0,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "Cursor",
          "persistentUuid": "02343d6c-3507-4d16-aa6b-449883191605",
          "width": 0,
          "x": -583.6,
          "y": -169.8,
          "zOrder": 12,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 356,
          "layer": "",
          "locked": false,
          "name": "Shell_1",
          "persistentUuid": "6f0a5cc6-9709-42b8-a48c-47ebf5b6f570",
          "width": 397,
          "x": -569,
          "y": -23,
          "zOrder": 15,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 334.625,
          "customSize": true,
          "height": 269.507,
          "layer": "",
          "locked": false,
          "name": "Shell_2",
          "persistentUuid": "d029504e-17e9-4499-9c8d-e0301a372676",
          "width": 269.507,
          "x": -639.254,
          "y": 434.746,
          "zOrder": 100,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 76.435,
          "customSize": true,
          "height": 266,
          "layer": "",
          "locked": false,
          "name": "Shell_3",
          "persistentUuid": "382c4f9d-d3e8-46c1-8c4f-5914ea2984af",
          "width": 266,
          "x": -372.485,
          "y": -53.5152,
          "zOrder": 15,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 298,
          "layer": "",
          "locked": false,
          "name": "Shell_4",
          "persistentUuid": "01786ef4-3a43-4469-bfe1-a8adb98c5b68",
          "width": 298,
          "x": -415,
          "y": 240,
          "zOrder": 4,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 96,
          "layer": "",
          "locked": false,
          "name": "Path_1",
          "persistentUuid": "a29bc114-630f-4a2d-aab1-a77d8a135b43",
          "width": 1151,
          "x": -353,
          "y": 480,
          "zOrder": 17,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "a8089646-648f-452a-a0ae-e1a271ded5f0",
          "width": 0,
          "x": -88.868,
          "y": 335.382,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 350.787,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "b14bb3e7-a2a7-4bab-9a1f-9e22c63b3037",
          "width": 0,
          "x": -78.4208,
          "y": 481.357,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "0c49018e-80dc-4872-af94-a22628cad9cf",
          "width": 0,
          "x": -173.395,
          "y": 271.173,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "e1abadc8-8b99-4094-a593-3ad3262473b4",
          "width": 0,
          "x": -86.2083,
          "y": 57.3951,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 553,
          "layer": "",
          "locked": false,
          "name": "Block",
          "persistentUuid": "e52ceb53-2491-4afb-89cb-c499c6db595f",
          "width": 92,
          "x": -590,
          "y": -11,
          "zOrder": 19,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "5972ad10-0ebd-4f90-a73f-5e920300561b",
          "width": 0,
          "x": -95.6049,
          "y": 203.312,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "7f2687d4-a717-4ac5-bfff-20d7e2ae4e9d",
          "width": 0,
          "x": -161.605,
          "y": 123.312,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 356.874,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Wind",
          "persistentUuid": "801cb3f9-adb0-453c-8b57-ad97b9f79728",
          "width": 0,
          "x": -173.605,
          "y": 423.173,
          "zOrder": 18,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 314.579,
          "customSize": true,
          "height": 274,
          "layer": "",
          "locked": false,
          "name": "Shell_2",
          "persistentUuid": "03eebc60-7d64-4d9f-85b4-cfe1f78257a8",
          "width": 274,
          "x": -100.435,
          "y": 446.435,
          "zOrder": 100,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "FPS",
          "persistentUuid": "90b2c76d-ea1c-405b-a9e8-18ed9b50ad80",
          "width": 0,
          "x": 562,
          "y": -3,
          "zOrder": 22,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 530,
          "layer": "",
          "locked": false,
          "name": "Trigger_1wind",
          "persistentUuid": "2704077b-ac27-495e-8647-59cb422de930",
          "width": 845,
          "x": -5,
          "y": 30,
          "zOrder": 23,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Windtext",
          "persistentUuid": "2bf3d25e-22d7-43c7-8a77-953ed9828e5b",
          "width": 0,
          "x": -431,
          "y": -182,
          "zOrder": 24,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "wind_text",
          "persistentUuid": "a966507e-1340-42e2-a91c-9cf4878f013c",
          "width": 0,
          "x": -229,
          "y": -217.6,
          "zOrder": 25,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "8d79da8f-213e-45d4-86c2-8336e2571379",
          "width": 0,
          "x": -98,
          "y": 311,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "UIsoul",
          "persistentUuid": "e264c9d3-974e-41c4-a512-c45905566ae8",
          "width": 0,
          "x": 2,
          "y": 14,
          "zOrder": 27,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Souldebugtext",
          "persistentUuid": "1eb2f173-c223-4fc8-bf17-750f0e34e186",
          "width": 0,
          "x": 44,
          "y": 120,
          "zOrder": 28,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": true,
          "height": 622,
          "layer": "Background",
          "locked": false,
          "name": "background",
          "persistentUuid": "3c089e18-9b1b-497a-872f-b2d5ea0018d5",
          "width": 1026,
          "x": -110,
          "y": -18,
          "zOrder": 29,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "34f11d54-9c41-4c0e-a2a7-bef9153fb03c",
          "width": 0,
          "x": -204,
          "y": 259,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "24918aa9-8170-4984-a42c-f757d4be2cba",
          "width": 0,
          "x": -298,
          "y": 219,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "c95e1e83-33be-4cb0-94c8-332c0e57360c",
          "width": 0,
          "x": -282,
          "y": 335,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "3d6294c2-22a0-4bb5-9db8-74f94f14c2cb",
          "width": 0,
          "x": -196,
          "y": 357,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "persistentUuid": "df112ed4-f69c-4134-b62c-58b847268445",
          "width": 0,
          "x": -98,
          "y": 313,
          "zOrder": 26,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Skill1_icon",
          "persistentUuid": "670735e3-4d95-49c2-84be-3448109f9d61",
          "width": 0,
          "x": 102,
          "y": 29,
          "zOrder": 30,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 270.651,
          "customSize": false,
          "height": 0,
          "layer": "UI",
          "locked": false,
          "name": "Skill1particle",
          "persistentUuid": "e6a66c38-5af0-4873-ac5a-478c73992955",
          "width": 0,
          "x": 127.277,
          "y": 62.2769,
          "zOrder": 1,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "speedboostcircle",
          "persistentUuid": "e9cc6c91-d7e2-4684-91ac-4def50d61431",
          "width": 0,
          "x": -305,
          "y": 527.4,
          "zOrder": 20,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        }
      ],
      "objects": [
        {
          "name": "jumpthrough",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "Platform",
              "type": "PlatformBehavior::PlatformBehavior",
              "platformType": "Jumpthru",
              "canBeGrabbed": true,
              "yGrabOffset": 0
            }
          ],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "platform",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "Physics2",
              "type": "Physics2::Physics2Behavior",
              "bodyType": "Static",
              "bullet": false,
              "fixedRotation": false,
              "canSleep": true,
              "shape": "Box",
              "shapeDimensionA": 0,
              "shapeDimensionB": 0,
              "shapeOffsetX": 0,
              "shapeOffsetY": 0,
              "polygonOrigin": "Center",
              "vertices": [],
              "density": 1,
              "friction": 0.3,
              "restitution": 0.1,
              "linearDamping": 0.1,
              "angularDamping": 0.1,
              "gravityScale": 1,
              "layers": 1,
              "masks": 1
            },
            {
              "name": "Platform",
              "type": "PlatformBehavior::PlatformBehavior",
              "canBeGrabbed": true,
              "platformType": "NormalPlatform",
              "yGrabOffset": 0
            }
          ],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "ball",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "Physics2",
              "type": "Physics2::Physics2Behavior",
              "bodyType": "Dynamic",
              "bullet": false,
              "fixedRotation": false,
              "canSleep": true,
              "shape": "Circle",
              "shapeDimensionA": 0,
              "shapeDimensionB": 0,
              "shapeOffsetX": 0,
              "shapeOffsetY": 0,
              "polygonOrigin": "Center",
              "vertices": [],
              "density": 1,
              "friction": 0.3,
              "restitution": 0.1,
              "linearDamping": 0.1,
              "angularDamping": 0.1,
              "gravityScale": 1,
              "layers": 1,
              "masks": 1
            }
          ],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1-0.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Back",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "tumblr_e9b2d9c939a916497c06e0a342f94434_9f73b2f8_640.jpg",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "room1",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "room2",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1-2.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Bg",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "maxresdefault.jpg",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Quirrel_dash",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "Quirrel_dash2",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "Quirrel_dash2-1-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 42.79999923706055,
                        "y": 52.70000076293945
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "additive": false,
          "destroyWhenNoParticles": false,
          "emitterAngleA": 0,
          "emitterAngleB": 30,
          "emitterForceMax": 1000,
          "emitterForceMin": 1000,
          "flow": 10,
          "maxParticleNb": 300,
          "name": "Wind",
          "particleAlpha1": 100,
          "particleAlpha2": 0,
          "particleAlphaRandomness1": 0,
          "particleAlphaRandomness2": 0,
          "particleAngle1": 0,
          "particleAngle2": 0,
          "particleAngleRandomness1": 0,
          "particleAngleRandomness2": 0,
          "particleBlue1": 182,
          "particleBlue2": 255,
          "particleGravityX": 0,
          "particleGravityY": 0,
          "particleGreen1": 182,
          "particleGreen2": 255,
          "particleLifeTimeMax": 2.5,
          "particleLifeTimeMin": 0.5,
          "particleRed1": 182,
          "particleRed2": 255,
          "particleSize1": 99,
          "particleSize2": 100,
          "particleSizeRandomness1": 0,
          "particleSizeRandomness2": 0,
          "rendererParam1": 10,
          "rendererParam2": 6,
          "rendererType": "Line",
          "tags": "Background",
          "tank": -1,
          "textureParticleName": "",
          "type": "ParticleSystem::ParticleEmitter",
          "zoneRadius": 30,
          "variables": [],
          "effects": [],
          "behaviors": []
        },
        {
          "name": "NewObject",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": []
        },
        {
          "name": "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [
            {
              "name": "Health",
              "type": "string",
              "value": "3"
            }
          ],
          "effects": [],
          "behaviors": [
            {
              "name": "PlatformerObject",
              "type": "PlatformBehavior::PlatformerObjectBehavior",
              "ignoreDefaultControls": true,
              "acceleration": 1500,
              "canGrabPlatforms": false,
              "deceleration": 1500,
              "gravity": 1000,
              "jumpSpeed": 600,
              "jumpSustainTime": 0.2,
              "ladderClimbingSpeed": 150,
              "maxFallingSpeed": 700,
              "maxSpeed": 250,
              "slopeMaxAngle": 60,
              "useLegacyTrajectory": false,
              "xGrabTolerance": 10,
              "yGrabOffset": 0
            }
          ],
          "animations": [
            {
              "name": "not",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject2-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "hit",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject2-1 - Copy.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Dashicon",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "1",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.05,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "0.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-2.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-3.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-4.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "24.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-6.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-7.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-8.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "34.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-10.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-11.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-12.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "43.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-14.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-15.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-16.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "53.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-18.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-19.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-20.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "6.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-22.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-23.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-24.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "7.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "load-26.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "9.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "10.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "112.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "123.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "133.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "142.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "152.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "162.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "172.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "182.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "192.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "202.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "212.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "224.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Cursor",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewObject2",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject2-1-0.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 31.399999618530273,
                        "y": 32.20000076293945
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Shell_1",
          "tags": "Background",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "Shell_1",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "Shell_1-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Shell_2",
          "tags": "Background",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "Shel_2",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "Shel_2-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Shell_3",
          "tags": "Background",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "Shell_3",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "Shell_3-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Shell_4",
          "tags": "Background",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "shell_4",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "shell_4-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "height": 32,
          "name": "Path_1",
          "tags": "",
          "texture": "Path_12-1.png",
          "type": "TiledSpriteObject::TiledSprite",
          "width": 32,
          "variables": [],
          "effects": [],
          "behaviors": []
        },
        {
          "name": "Block",
          "tags": "TRIGER",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "Platform",
              "type": "PlatformBehavior::PlatformBehavior",
              "canBeGrabbed": false,
              "platformType": "NormalPlatform",
              "yGrabOffset": 0
            }
          ],
          "animations": [
            {
              "name": "Block",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "Block-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "Trigger_1wind",
          "tags": "TRIGER",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "NewObject2",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject2-1-1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "bold": false,
          "italic": false,
          "name": "FPS",
          "smoothed": true,
          "tags": "",
          "type": "TextObject::Text",
          "underlined": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "FPSDisplayer",
              "type": "FPS::FPSDisplayer",
              "prefix": "Frames per second: "
            }
          ],
          "string": "0",
          "font": "",
          "characterSize": 20,
          "color": {
            "b": 0,
            "g": 0,
            "r": 209
          }
        },
        {
          "bold": false,
          "italic": false,
          "name": "Windtext",
          "smoothed": true,
          "tags": "",
          "type": "TextObject::Text",
          "underlined": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "string": "Why do we seek that place? idk shut up",
          "font": "Trajan Pro.ttf",
          "characterSize": 35,
          "color": {
            "b": 255,
            "g": 255,
            "r": 255
          }
        },
        {
          "name": "UIsoul",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "0",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "02.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "1",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "110.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "2",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "25.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "3",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "35.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "4",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "44.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "5",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "54.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "6",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "62.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "full",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "72.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "full1",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "73.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "ulti",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "74.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "82.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "92.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "102.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "113.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "124.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "134.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "143.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "bold": false,
          "italic": false,
          "name": "Souldebugtext",
          "smoothed": true,
          "tags": "",
          "type": "TextObject::Text",
          "underlined": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "string": "0",
          "font": "",
          "characterSize": 25,
          "color": {
            "b": 255,
            "g": 255,
            "r": 255
          }
        },
        {
          "height": 32,
          "name": "background",
          "tags": "",
          "texture": "NewFile-1-0.png",
          "type": "TiledSpriteObject::TiledSprite",
          "width": 32,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "HorizontalTiledSpriteParallax",
              "type": "Parallax::HorizontalTiledSpriteParallax",
              "ParallaxFactor": 0.1,
              "FollowedLayer": ""
            }
          ]
        },
        {
          "name": "Skill1_icon",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown102.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "Cooldown",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown2.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown3.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown4.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown5.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown6.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown7.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown8.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown9.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "cooldown10.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "loaded",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded1.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded2.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded3.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded4.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded5.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    },
                    {
                      "hasCustomCollisionMask": false,
                      "image": "loaded6.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "additive": false,
          "destroyWhenNoParticles": true,
          "emitterAngleA": 0,
          "emitterAngleB": 90,
          "emitterForceMax": 85,
          "emitterForceMin": 45,
          "flow": 45,
          "maxParticleNb": 300,
          "name": "Skill1particle",
          "particleAlpha1": 204,
          "particleAlpha2": 0,
          "particleAlphaRandomness1": 0,
          "particleAlphaRandomness2": 0,
          "particleAngle1": 0,
          "particleAngle2": 0,
          "particleAngleRandomness1": 0,
          "particleAngleRandomness2": 0,
          "particleBlue1": 255,
          "particleBlue2": 255,
          "particleGravityX": 0,
          "particleGravityY": 0,
          "particleGreen1": 0,
          "particleGreen2": 175,
          "particleLifeTimeMax": 2.5,
          "particleLifeTimeMin": 0.5,
          "particleRed1": 30,
          "particleRed2": 0,
          "particleSize1": 100,
          "particleSize2": 100,
          "particleSizeRandomness1": 0,
          "particleSizeRandomness2": 0,
          "rendererParam1": 3,
          "rendererParam2": 1,
          "rendererType": "Point",
          "tags": "",
          "tank": -1,
          "textureParticleName": "",
          "type": "ParticleSystem::ParticleEmitter",
          "zoneRadius": 3,
          "variables": [],
          "effects": [],
          "behaviors": []
        },
        {
          "name": "speedboostcircle",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [],
          "animations": [
            {
              "name": "",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "yep.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 47,
                        "y": 153.39999389648438
                      },
                      "centerPoint": {
                        "automatic": false,
                        "name": "centre",
                        "x": 47,
                        "y": 153.39999389648438
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Link",
          "include": {
            "includeConfig": 0
          },
          "target": "Triggers"
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Link",
          "include": {
            "includeConfig": 0
          },
          "target": "Soul"
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "DepartScene"
              },
              "parameters": [
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CacheSouris"
              },
              "parameters": [
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetGlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect2\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "Skill1particle"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "speedboostcircle"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ActivateBehavior"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "PlatformBehavior::JumpSpeed"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "=",
                "600"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "PlatformBehavior::JumpSpeed"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "=",
                "0"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "AnimationEnded"
              },
              "parameters": [
                "Quirrel"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "AnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Slash\""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"idle_1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "AnimationEnded"
              },
              "parameters": [
                "Quirrel"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "AnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"idle_1\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "PlatformBehavior::Gravity"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "=",
                "1000"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ActivateBehavior"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "AnyKeyPressed"
              },
              "parameters": [
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "VarGlobal"
              },
              "parameters": [
                "Movement",
                "=",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"idle_1\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                "no"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "AnyKeyPressed"
              },
              "parameters": [
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                "no"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "d"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MettreX"
              },
              "parameters": [
                "Quirrel",
                "+",
                "6"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "a"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MettreX"
              },
              "parameters": [
                "Quirrel",
                "-",
                "6"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "a"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"walk\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "d"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"walk\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "PlatformBehavior::IsJumping"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Or"
              },
              "parameters": [],
              "subInstructions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "KeyPressed"
                  },
                  "parameters": [
                    "",
                    "d"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "KeyPressed"
                  },
                  "parameters": [
                    "",
                    "a"
                  ],
                  "subInstructions": []
                }
              ]
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Slash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "dash",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "a"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\"",
                ">",
                "2"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "AddForceAL"
              },
              "parameters": [
                "Quirrel",
                "180",
                "4000",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ActivateBehavior"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Dashicon",
                "\"1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\"",
                ">",
                "2"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "d"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "AddForceAL"
              },
              "parameters": [
                "Quirrel",
                "0",
                "3500",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Light\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ActivateBehavior"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Dashicon",
                "\"1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "a"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\"",
                "<",
                "0.7"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Create"
              },
              "parameters": [
                "",
                "Quirrel_dash",
                "Quirrel.PointX(\"\")",
                "Quirrel.PointY(\"\")",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel_dash",
                "\"fade\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel_dash",
                "no"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "d"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dashcooldown\"",
                "<",
                "0.7"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Right"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Create"
              },
              "parameters": [
                "",
                "Quirrel_dash",
                "Quirrel.PointX(\"\")",
                "Quirrel.PointY(\"\")",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel_dash",
                "\"fade\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "FlipX"
              },
              "parameters": [
                "Quirrel_dash",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel_dash",
                "\"fade\"",
                ">",
                "0.1"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Opacity"
              },
              "parameters": [
                "Quirrel_dash",
                "-",
                "10"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"Dash\"",
                ">",
                "0.050"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Arreter"
              },
              "parameters": [
                "Quirrel"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ActivateBehavior"
              },
              "parameters": [
                "Quirrel",
                "PlatformerObject",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "room1",
                "",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "RoomBasedCameraMovement::MoveCameraToActiveRoom"
              },
              "parameters": [
                "",
                "room1",
                "Quirrel",
                "\"\"",
                "0.05",
                "1",
                "1",
                "1",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "room2",
                "",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "RoomBasedCameraMovement::MoveCameraToActiveRoom"
              },
              "parameters": [
                "",
                "room2",
                "Quirrel",
                "\"\"",
                "0.05",
                "1",
                "1",
                "1",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "AddForceVers"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "Quirrel",
                "10",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "AnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Slash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Sprite"
              },
              "parameters": [
                "Quirrel",
                ">",
                "4"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ModVarObjet"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "Health",
                "-",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "PlaySound"
              },
              "parameters": [
                "",
                "NewFile.wav",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "\"hit\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CameraShake::CameraShake"
              },
              "parameters": [
                "",
                "5",
                "5",
                "\"\"",
                "0",
                "0.3",
                "2",
                "3",
                "0.008",
                "no",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ModVarGlobal"
              },
              "parameters": [
                "Soul",
                "+",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect2\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "UIsoul",
                "\"reseteffect\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "UIsoul",
                "\"reseteffect\"",
                ">",
                "0.1"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "UIsoul",
                "\"Effect2\"",
                "no"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "AnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"Slash\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "\"not\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarObjet"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                "Health",
                "<",
                "1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Delete"
              },
              "parameters": [
                "HAHAHAHAENEMYGOBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetGlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "False"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "Quirrel",
                "\"idle_1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ],
      "layers": [
        {
          "ambientLightColorB": 117440512,
          "ambientLightColorG": 6029040,
          "ambientLightColorR": 8862144,
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "name": "Background",
          "visibility": true,
          "cameras": [],
          "effects": []
        },
        {
          "ambientLightColorB": 32,
          "ambientLightColorG": 0,
          "ambientLightColorR": 0,
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "name": "",
          "visibility": true,
          "cameras": [
            {
              "defaultSize": true,
              "defaultViewport": true,
              "height": 0,
              "viewportBottom": 1,
              "viewportLeft": 0,
              "viewportRight": 1,
              "viewportTop": 0,
              "width": 0
            }
          ],
          "effects": []
        },
        {
          "ambientLightColorB": 8506232,
          "ambientLightColorG": 6029040,
          "ambientLightColorR": 8630752,
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "name": "camera",
          "visibility": true,
          "cameras": [],
          "effects": []
        },
        {
          "ambientLightColorB": 134217728,
          "ambientLightColorG": 6029040,
          "ambientLightColorR": 7133456,
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "name": "UI",
          "visibility": true,
          "cameras": [],
          "effects": []
        }
      ],
      "behaviorsSharedData": [
        {
          "name": "FPSDisplayer",
          "type": "FPS::FPSDisplayer"
        },
        {
          "name": "HorizontalTiledSpriteParallax",
          "type": "Parallax::HorizontalTiledSpriteParallax"
        },
        {
          "name": "Physics2",
          "type": "Physics2::Physics2Behavior",
          "gravityX": 0,
          "gravityY": 9.8,
          "scaleX": 100,
          "scaleY": 100
        },
        {
          "name": "Platform",
          "type": "PlatformBehavior::PlatformBehavior"
        },
        {
          "name": "PlatformerObject",
          "type": "PlatformBehavior::PlatformerObjectBehavior"
        }
      ]
    },
    {
      "b": 209,
      "disableInputWhenNotFocused": true,
      "mangledName": "New_32scene",
      "name": "New scene",
      "oglFOV": 90,
      "oglZFar": 500,
      "oglZNear": 1,
      "r": 209,
      "standardSortMethod": true,
      "stopSoundsOnStartup": true,
      "title": "",
      "v": 209,
      "uiSettings": {
        "grid": false,
        "gridB": 255,
        "gridG": 180,
        "gridHeight": 32,
        "gridOffsetX": 0,
        "gridOffsetY": 0,
        "gridR": 158,
        "gridWidth": 32,
        "snap": false,
        "windowMask": false,
        "zoomFactor": 0.5
      },
      "objectsGroups": [],
      "variables": [],
      "instances": [
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "Quirrel",
          "persistentUuid": "0a98b68a-0bc5-4291-9da2-3bcce3a4135a",
          "width": 0,
          "x": 513.85,
          "y": 481.95,
          "zOrder": 1,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        },
        {
          "angle": 0,
          "customSize": false,
          "height": 0,
          "layer": "",
          "locked": false,
          "name": "NewObject",
          "persistentUuid": "0b20d7b9-086f-40b4-b5b2-2f8abba1ee3c",
          "width": 0,
          "x": 490,
          "y": 532,
          "zOrder": 2,
          "numberProperties": [],
          "stringProperties": [],
          "initialVariables": []
        }
      ],
      "objects": [
        {
          "name": "NewObject",
          "tags": "",
          "type": "Sprite",
          "updateIfNotVisible": false,
          "variables": [],
          "effects": [],
          "behaviors": [
            {
              "name": "Platform",
              "type": "PlatformBehavior::PlatformBehavior",
              "canBeGrabbed": true,
              "platformType": "NormalPlatform",
              "yGrabOffset": 0
            }
          ],
          "animations": [
            {
              "name": "NewObject",
              "useMultipleDirections": false,
              "directions": [
                {
                  "looping": false,
                  "timeBetweenFrames": 0.08,
                  "sprites": [
                    {
                      "hasCustomCollisionMask": false,
                      "image": "NewObject-1-3.png",
                      "points": [],
                      "originPoint": {
                        "name": "origine",
                        "x": 0,
                        "y": 0
                      },
                      "centerPoint": {
                        "automatic": true,
                        "name": "centre",
                        "x": 0,
                        "y": 0
                      },
                      "customCollisionMask": []
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "events": [],
      "layers": [
        {
          "ambientLightColorB": 8789120,
          "ambientLightColorG": 150995056,
          "ambientLightColorR": 1869182080,
          "followBaseLayerCamera": false,
          "isLightingLayer": false,
          "name": "",
          "visibility": true,
          "cameras": [
            {
              "defaultSize": true,
              "defaultViewport": true,
              "height": 0,
              "viewportBottom": 1,
              "viewportLeft": 0,
              "viewportRight": 1,
              "viewportTop": 0,
              "width": 0
            }
          ],
          "effects": []
        }
      ],
      "behaviorsSharedData": [
        {
          "name": "Platform",
          "type": "PlatformBehavior::PlatformBehavior"
        },
        {
          "name": "PlatformerObject",
          "type": "PlatformBehavior::PlatformerObjectBehavior"
        }
      ]
    }
  ],
  "externalEvents": [
    {
      "associatedLayout": "Prototype",
      "lastChangeTimeStamp": 0,
      "name": "Triggers",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "DepartScene"
              },
              "parameters": [
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "wind_text"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::Opacity"
              },
              "parameters": [
                "wind_text",
                "<",
                "1"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "wind_text"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetCenter"
              },
              "parameters": [
                "wind_text",
                "=",
                "400",
                "=",
                "90"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": true,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "BitmapText::BitmapTextObject::SetOpacity"
                  },
                  "parameters": [
                    "wind_text",
                    "-",
                    "10"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ]
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::SetText"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"Why do we seek that place?\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Montre"
              },
              "parameters": [
                "wind_text",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "BitmapText::BitmapTextObject::SetOpacity"
                  },
                  "parameters": [
                    "wind_text",
                    "+",
                    "10"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ]
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::Text"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"Why do we seek that place?\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyReleased"
              },
              "parameters": [
                "",
                "Return"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::SetText"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"The land of wonders, of promise, of dreams\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "wind_text",
                "\"3\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "wind_text",
                "\"3\"",
                ">",
                "0.5"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::Text"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"The land of wonders, of promise, of dreams\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyReleased"
              },
              "parameters": [
                "",
                "Return"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::SetText"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"Hallownest\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::SetTint"
              },
              "parameters": [
                "wind_text",
                "\"0;184;255\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "wind_text",
                "\"4\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "wind_text",
                "\"4\"",
                ">",
                "0.5"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "CollisionNP"
              },
              "parameters": [
                "Quirrel",
                "Trigger_1wind",
                "",
                "",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BitmapText::BitmapTextObject::Text"
              },
              "parameters": [
                "wind_text",
                "=",
                "\"Hallownest\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyReleased"
              },
              "parameters": [
                "",
                "Return"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "Delete"
              },
              "parameters": [
                "Trigger_1wind",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetGlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ]
    },
    {
      "associatedLayout": "Prototype",
      "lastChangeTimeStamp": 0,
      "name": "Soul",
      "events": [
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "TextObject::String"
              },
              "parameters": [
                "Souldebugtext",
                "=",
                "GlobalVariableString(Soul)"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "MettreXY"
              },
              "parameters": [
                "speedboostcircle",
                "=",
                "Quirrel.PointX(\"leg\")",
                "=",
                "Quirrel.PointY(\"leg\")"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "Display",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "0"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"0\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "1"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "2"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"2\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "3"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"3\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "4"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"4\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "5"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"5\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "6"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"6\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "7"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"full\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "8"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"full1\""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "AnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"full1\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "AnimationEnded"
              },
              "parameters": [
                "UIsoul"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetAnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"ulti\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "AnimationName"
              },
              "parameters": [
                "UIsoul",
                "\"ulti\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Sprite"
              },
              "parameters": [
                "UIsoul",
                ">",
                "0"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"ulti\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Ulti\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "Animation"
              },
              "parameters": [
                "UIsoul",
                "<",
                "9"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"ulti\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Ulti\"",
                "no"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "missplaced variable fix",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                ">",
                "9"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ModVarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "9"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                "<",
                "1"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ModVarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "0"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "debug",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "F1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "BuiltinCommonInstructions::Once"
              },
              "parameters": [],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ModVarGlobal"
              },
              "parameters": [
                "Soul",
                "+",
                "1"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Comment",
          "color": {
            "b": 109,
            "g": 230,
            "r": 255,
            "textB": 0,
            "textG": 0,
            "textR": 0
          },
          "comment": "skill1",
          "comment2": ""
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "VarGlobal"
              },
              "parameters": [
                "Soul",
                ">",
                "8"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "Num1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "Movement",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "ModVarGlobal"
              },
              "parameters": [
                "Soul",
                "=",
                "0"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "ResetObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"speedboost\""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"ulti\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Quirrel",
                "\"Ulti\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Montre"
              },
              "parameters": [
                "Skill1particle",
                ""
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "SetGlobalVariableAsBoolean"
              },
              "parameters": [
                "speedboost",
                "True"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Montre"
              },
              "parameters": [
                "speedboostcircle",
                ""
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"speedboost\"",
                ">",
                "0.1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "a"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "speedboost",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "MettreX"
              },
              "parameters": [
                "Quirrel",
                "-",
                "20"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"speedboost\"",
                ">",
                "0.1"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": true,
                "value": "MouseButtonPressed"
              },
              "parameters": [
                "",
                "Left"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "KeyPressed"
              },
              "parameters": [
                "",
                "d"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "GlobalVariableAsBoolean"
              },
              "parameters": [
                "speedboost",
                "True"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "MettreX"
              },
              "parameters": [
                "Quirrel",
                "+",
                "20"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"speedboost\"",
                ">",
                "3"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "SetGlobalVariableAsBoolean"
              },
              "parameters": [
                "speedboost",
                "False"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "no"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "Skill1particle"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "Cache"
              },
              "parameters": [
                "speedboostcircle"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        },
        {
          "disabled": false,
          "folded": false,
          "type": "BuiltinCommonInstructions::Standard",
          "conditions": [
            {
              "type": {
                "inverted": false,
                "value": "CompareObjectTimer"
              },
              "parameters": [
                "Quirrel",
                "\"speedboost\"",
                "<",
                "3"
              ],
              "subInstructions": []
            }
          ],
          "actions": [
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow\"",
                "yes"
              ],
              "subInstructions": []
            },
            {
              "type": {
                "inverted": false,
                "value": "EnableEffect"
              },
              "parameters": [
                "Skill1_icon",
                "\"Glow1\"",
                "yes"
              ],
              "subInstructions": []
            }
          ],
          "events": []
        }
      ]
    }
  ],
  "eventsFunctionsExtensions": [
    {
      "author": "Bouh",
      "description": "Add support for gamepads (or other controllers) to your game, giving access to information such as button presses, axis positions, axis force, trigger pressure, deadzone for each gamepad, etc...\n\nUp to 4 gamepads can be connected. For each condition or expression, you'll have to enter the index of the gamepad to read. This is 1, 2, 3 or 4.",
      "extensionNamespace": "",
      "fullName": "Gamepads (controllers)",
      "helpPath": "",
      "iconUrl": "",
      "name": "Gamepads",
      "previewIconUrl": "",
      "shortDescription": "Add support for gamepads (or other controllers) to your game, giving access to information such as button presses, axis positions, trigger pressure, etc...",
      "version": "0.0.9",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Get the value of the pressure on a gamepad trigger.",
          "fullName": "Pressure on a gamepad trigger",
          "functionType": "Expression",
          "name": "TriggerPressure",
          "private": false,
          "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst trigger = eventsFunctionContext.getArgument(\"trigger\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Pressure on a gamepad trigger\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (trigger != \"LT\" && trigger != \"RT\" && trigger != \"L2\" && trigger != \"R2\") {\r\n    console.error('Parameter trigger is not valid in expression: \"Pressure on a gamepad trigger\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nswitch (trigger) {\r\n    case 'LT':\r\n    case 'L2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[6].value;\r\n        break;\r\n\r\n    case 'RT':\r\n    case 'R2':\r\n        eventsFunctionContext.returnValue = gamepad.buttons[7].value;\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Trigger button",
              "longDescription": "",
              "name": "trigger",
              "optional": false,
              "supplementaryInformation": "[\"LT\",\"RT\",\"L2\",\"R2\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Get the force value of a gamepad stick.\n0 is stick on default position, 1 is at the maximum.",
          "fullName": "Value of a stick force",
          "functionType": "Expression",
          "name": "StickForce",
          "private": false,
          "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\n\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a stick force\"');\r\n    return;\r\n}\r\n\r\nif (stick !== \"LEFT\" && stick !== \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a stick force\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        eventsFunctionContext.returnValue = gdjs.evtTools.common.clamp(Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId)) + Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId)), 0, 1);\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        eventsFunctionContext.returnValue = gdjs.evtTools.common.clamp(Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId)) + Math.abs(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId)), 0, 1);\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Stick: \"LEFT\" or \"RIGHT\"",
              "longDescription": "",
              "name": "stick",
              "optional": false,
              "supplementaryInformation": "[\"LEFT\",\"RIGHT\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Get the rotation value of a gamepad stick.\nIf the deadzone value is high, the angle value is rounded to main axes, left, left, up, down.\nAn zero deadzone value give a total freedom on the angle value.",
          "fullName": "Value of a stick rotation",
          "functionType": "Expression",
          "name": "StickRotationValue",
          "private": false,
          "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\n\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a stick rotation\"');\r\n    return;\r\n}\r\nif (stick !== \"LEFT\" && stick !== \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a stick rotation\"');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        eventsFunctionContext.returnValue = gdjs._extensionController.axisToAngle(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId), gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId));\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        eventsFunctionContext.returnValue = gdjs._extensionController.axisToAngle(gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId), gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId));\r\n        break;\r\n\r\n    default:\r\n        eventsFunctionContext.returnValue = -1;\r\n        break;\r\n}",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Stick: \"LEFT\" or \"RIGHT\"",
              "longDescription": "",
              "name": "stick",
              "optional": false,
              "supplementaryInformation": "[\"LEFT\",\"RIGHT\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Get the value of axis of a gamepad stick.",
          "fullName": "Value of a gamepad axis",
          "functionType": "Expression",
          "name": "AxisValue",
          "private": false,
          "sentence": "Player _PARAM1_ push axis _PARAM2_ to _PARAM3_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\nconst direction = eventsFunctionContext.getArgument(\"direction\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nif (stick != \"LEFT\" && stick != \"RIGHT\") {\r\n    console.error('Parameter stick is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nif (direction != \"UP\" && direction != \"DOWN\" && direction != \"LEFT\" && direction != \"RIGHT\" && direction != \"HORIZONTAL\" && direction != \"VERTICAL\") {\r\n    console.error('Parameter direction is not valid in expression: \"Value of a gamepad axis\"');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet parameterError = false;\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                }\r\n                break;\r\n\r\n            case \"HORIZONTAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[0], playerId);\r\n                break;\r\n\r\n            case \"VERTICAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[1], playerId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = -gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                }\r\n                break;\r\n\r\n            case \"HORIZONTAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[2], playerId);\r\n                break;\r\n\r\n            case \"VERTICAL\":\r\n                eventsFunctionContext.returnValue = gdjs._extensionController.getNormalizedAxisValue(gamepad.axes[3], playerId);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        break;\r\n}\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Stick: \"LEFT\" or \"RIGHT\"",
              "longDescription": "",
              "name": "stick",
              "optional": false,
              "supplementaryInformation": "[\"LEFT\",\"RIGHT\"]",
              "type": "stringWithSelector"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Direction",
              "longDescription": "",
              "name": "direction",
              "optional": false,
              "supplementaryInformation": "[\"UP\",\"DOWN\",\"LEFT\",\"RIGHT\",\"HORIZONTAL\",\"VERTICAL\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Test if a button is released on a gamepad. Buttons can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Other: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\".",
          "fullName": "Gamepad button released",
          "functionType": "Condition",
          "name": "C_Button_released",
          "private": false,
          "sentence": "Button _PARAM2_ of gamepad _PARAM1_ is released",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst button = eventsFunctionContext.getArgument(\"button\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad button released\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (button === \"\") {\r\n    console.error('Parameter button is not valid in condition: \"Gamepad button released\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\n\r\nswitch (button) {\r\n    case 'A':\r\n    case 'CROSS':\r\n        buttonId = 0;\r\n        break;\r\n    case 'B':\r\n    case 'CIRCLE':\r\n        buttonId = 1;\r\n        break;\r\n    case 'X':\r\n    case 'SQUARE':\r\n        buttonId = 2;\r\n        break;\r\n    case 'Y':\r\n    case 'TRIANGLE':\r\n        buttonId = 3;\r\n        break;\r\n    case 'LB':\r\n    case 'L1':\r\n        buttonId = 4;\r\n        break;\r\n    case 'RB':\r\n    case 'R1':\r\n        buttonId = 5;\r\n        break;\r\n    case 'LT':\r\n    case 'L2':\r\n        buttonId = 6;\r\n        break;\r\n    case 'RT':\r\n    case 'R2':\r\n        buttonId = 7;\r\n        break;\r\n\r\n    case 'UP':\r\n        buttonId = 12;\r\n        break;\r\n    case 'DOWN':\r\n        buttonId = 13;\r\n        break;\r\n    case 'LEFT':\r\n        buttonId = 14;\r\n        break;\r\n    case 'RIGHT':\r\n        buttonId = 15;\r\n        break;\r\n\r\n    case 'BACK':\r\n    case 'SHARE':\r\n        buttonId = 8;\r\n        break;\r\n    case 'START':\r\n    case 'OPTIONS':\r\n        buttonId = 9;\r\n        break;\r\n\r\n    case 'CLICK_STICK_LEFT':\r\n        buttonId = 10;\r\n        break;\r\n    case 'CLICK_STICK_RIGHT':\r\n        buttonId = 11;\r\n        break;\r\n\r\n    //PS4\r\n    case 'PS_BUTTON':\r\n        buttonId = 16;\r\n        break;\r\n    case 'CLICK_TOUCHPAD':\r\n        buttonId = 17;\r\n        break;\r\n\r\n    default:\r\n        console.error('The button: ' + button + ' in condition: \"Gamepad button released\" is not valid.');\r\n        break;\r\n}\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Gamepad button released\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Gamepad button released\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//Define default value on pressed button or use previous value\r\ngdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] || { pressed: false };\r\n\r\n//Get state of button at previous frame\r\nconst previousStateButton = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed;\r\n\r\n//When previousStateButton is true and actual button state is not pressed\r\n//Player have release the button\r\nif (previousStateButton === true && gamepad.buttons[buttonId].pressed === false) {\r\n    // Save the last button used for the player    \r\n    gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\n    gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = true;\r\n    eventsFunctionContext.returnValue = true;\r\n\r\n} else {\r\n    gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = false;\r\n    eventsFunctionContext.returnValue = false;\r\n}\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Name of the button",
              "longDescription": "",
              "name": "button",
              "optional": false,
              "supplementaryInformation": "[\"A\",\"CROSS\",\"B\",\"CIRCLE\",\"X\",\"SQUARE\",\"Y\",\"TRIANGLE\",\"LB\",\"L1\",\"RB\",\"R1\",\"LT\",\"L2\",\"RT\",\"R2\",\"UP\",\"DOWN\",\"LEFT\",\"RIGHT\",\"BACK\",\"SHARE\",\"START\",\"OPTIONS\",\"CLICK_STICK_LEFT\",\"CLICK_STICK_RIGHT\",\"PS_BUTTON\",\"CLICK_TOUCHPAD\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the index of the last pressed button of a gamepad.",
          "fullName": "Last pressed button (id)",
          "functionType": "Expression",
          "name": "LastButtonID",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\n//Player id is not valid\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Last pressed button (id)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\n\r\n//Return the last button used by the player\r\neventsFunctionContext.returnValue = gdjs._extensionController.players[playerId].lastButtonUsed;",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if any button is pressed on a gamepad.",
          "fullName": "Any gamepad button pressed",
          "functionType": "Condition",
          "name": "C_Any_Button_pressed",
          "private": false,
          "sentence": "Any button of gamepad _PARAM1_ is pressed",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Any gamepad button pressed\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\nfor (let i = 0; i < gamepad.buttons.length; i++) { //For each buttons\r\n    if (gamepad.buttons[i].pressed) { //One of them is pressed\r\n        buttonId = i; //Save the button pressed\r\n        break;\r\n    }\r\n}\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Any gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Any gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//When a button is pressed, save the button in lastButtonUsed for each players\r\nif (gamepad.buttons[buttonId].pressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\neventsFunctionContext.returnValue = gamepad.buttons[buttonId].pressed;\r\n\r\n\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the last button pressed. \nButtons for Xbox and PS4 can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Both: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\".",
          "fullName": "Last pressed button (string)",
          "functionType": "StringExpression",
          "name": "LastButtonString",
          "private": false,
          "sentence": "Button _PARAM2_ of gamepad _PARAM1_ is pressed",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst controllerType = eventsFunctionContext.getArgument(\"controller_type\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in string expression: \"Last pressed button (LastButtonString)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (controllerType === \"\") {\r\n    console.error('Parameter controller type is not valid in string expression: \"Last pressed button (LastButtonString)\"');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\nif (gamepad !== null) { //Gamepad exist\r\n    //Get last btn id\r\n    const lastButtonUsedID = gdjs._extensionController.players[playerId].lastButtonUsed;\r\n\r\n    //Return last button as string    \r\n    eventsFunctionContext.returnValue = gdjs._extensionController.getInputString(controllerType, lastButtonUsedID);\r\n\r\n} else { //Gamepad dosen't exist\r\n    console.error('Your controller is not supported or the gamepad wasn\\'t detected in string expression: \"Last pressed button (LastButtonString)\"');\r\n    eventsFunctionContext.returnValue = \"Gamepad not connected\";\r\n}",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Controller type",
              "longDescription": "",
              "name": "controller_type",
              "optional": false,
              "supplementaryInformation": "[\"XBOX\",\"PS4\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if a button is pressed on a gamepad. \nButtons can be:\n* Xbox: \"A\", \"B\", \"X\", \"Y\", \"LB\", \"RB\", \"LT\", \"RT\", \"BACK\", \"START\",\n* PS4: \"CROSS\", \"SQUARE\", \"CIRCLE\", \"TRIANGLE\", \"L1\", \"L2\", \"R1\", \"R2\", \"SHARE\", \"OPTIONS\", \"PS_BUTTON\", \"CLICK_TOUCHPAD\",\n* Other: \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"CLICK_STICK_LEFT\", \"CLICK_STICK_RIGHT\".",
          "fullName": "Gamepad button pressed",
          "functionType": "Condition",
          "name": "C_Button_pressed",
          "private": false,
          "sentence": "Button _PARAM2_ of gamepad _PARAM1_ is pressed",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst button = eventsFunctionContext.getArgument(\"button\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad button pressed\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (button === \"\") {\r\n    console.error('Parameter button is not valid in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nlet buttonId;\r\n\r\nswitch (button) {\r\n    case 'A':\r\n    case 'CROSS':\r\n        buttonId = 0;\r\n        break;\r\n    case 'B':\r\n    case 'CIRCLE':\r\n        buttonId = 1;\r\n        break;\r\n    case 'X':\r\n    case 'SQUARE':\r\n        buttonId = 2;\r\n        break;\r\n    case 'Y':\r\n    case 'TRIANGLE':\r\n        buttonId = 3;\r\n        break;\r\n    case 'LB':\r\n    case 'L1':\r\n        buttonId = 4;\r\n        break;\r\n    case 'RB':\r\n    case 'R1':\r\n        buttonId = 5;\r\n        break;\r\n    case 'LT':\r\n    case 'L2':\r\n        buttonId = 6;\r\n        break;\r\n    case 'RT':\r\n    case 'R2':\r\n        buttonId = 7;\r\n        break;\r\n\r\n    case 'UP':\r\n        buttonId = 12;\r\n        break;\r\n    case 'DOWN':\r\n        buttonId = 13;\r\n        break;\r\n    case 'LEFT':\r\n        buttonId = 14;\r\n        break;\r\n    case 'RIGHT':\r\n        buttonId = 15;\r\n        break;\r\n\r\n    case 'BACK':\r\n    case 'SHARE':\r\n        buttonId = 8;\r\n        break;\r\n    case 'START':\r\n    case 'OPTIONS':\r\n        buttonId = 9;\r\n        break;\r\n\r\n    case 'CLICK_STICK_LEFT':\r\n        buttonId = 10;\r\n        break;\r\n    case 'CLICK_STICK_RIGHT':\r\n        buttonId = 11;\r\n        break;\r\n\r\n    //PS4\r\n    case 'PS_BUTTON':\r\n        buttonId = 16;\r\n        break;\r\n    case 'CLICK_TOUCHPAD':\r\n        buttonId = 17;\r\n        break;\r\n\r\n    default:\r\n        console.error('The button: ' + button + ' in condition: \"Gamepad button pressed\" is not valid.');\r\n        eventsFunctionContext.returnValue = false;\r\n        break;\r\n}\r\n\r\n\r\n\r\nif (buttonId === undefined) {\r\n    console.error('There is no buttons valid in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\nif (gamepad.buttons == null || gamepad.buttons[buttonId] == null) {\r\n    console.error('Buttons on the gamepad are not accessible in condition: \"Gamepad button pressed\"');\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n//When a button is pressed, save the button in lastButtonUsed for each players\r\nif (gamepad.buttons[buttonId].pressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\neventsFunctionContext.returnValue = gamepad.buttons[buttonId].pressed;\r\n\r\n\r\n\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Name of the button",
              "longDescription": "",
              "name": "button",
              "optional": false,
              "supplementaryInformation": "[\"A\",\"CROSS\",\"B\",\"CIRCLE\",\"X\",\"SQUARE\",\"Y\",\"TRIANGLE\",\"LB\",\"L1\",\"RB\",\"R1\",\"LT\",\"L2\",\"RT\",\"R2\",\"UP\",\"DOWN\",\"LEFT\",\"RIGHT\",\"BACK\",\"SHARE\",\"START\",\"OPTIONS\",\"CLICK_STICK_LEFT\",\"CLICK_STICK_RIGHT\",\"PS_BUTTON\",\"CLICK_TOUCHPAD\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the value of the deadzone applied to a gamepad sticks, between 0 and 1.",
          "fullName": "Gamepad deadzone for sticks",
          "functionType": "Expression",
          "name": "Deadzone",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in expression: \"Gamepad deadzone for sticks\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\n///Return the deadzone value for a given player\r\neventsFunctionContext.returnValue = gdjs._extensionController.players[playerId].deadzone;",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Set the deadzone for sticks of the gamepad. The deadzone is an area for which movement on sticks won't be taken into account (instead, the stick will be considered as not moved). Deadzone is between 0 and 1, and is by default 0.2.",
          "fullName": "Set gamepad deadzone for sticks",
          "functionType": "Action",
          "name": "A_Set_deadzone",
          "private": false,
          "sentence": "Set deadzone for sticks on gamepad: _PARAM1_ to _PARAM2_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "//Get function parameter\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst newDeadzone = eventsFunctionContext.getArgument(\"deadzone\");\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in action: \"Set gamepad deadzone for sticks\", is not valid, must be between 0 and 4.');\r\n    return;\r\n}\r\n\r\n// clamp the newDeadzone in range [0, 1].\r\n// https://github.com/4ian/GDevelop-extensions/pull/33#issuecomment-618224857\r\ngdjs._extensionController.players[playerId].deadzone = gdjs.evtTools.common.clamp(newDeadzone, 0, 1);\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Deadzone for sticks, 0.2 by default (0 to 1)",
              "longDescription": "",
              "name": "deadzone",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if a stick of a gamepad is pushed in a given direction.",
          "fullName": "Gamepad stick pushed (axis)",
          "functionType": "Condition",
          "name": "C_Axis_pushed",
          "private": false,
          "sentence": "_PARAM2_ stick of gamepad _PARAM1_ is pushed in direction _PARAM3_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\nconst stick = eventsFunctionContext.getArgument(\"stick\").toUpperCase();\r\nconst direction = eventsFunctionContext.getArgument(\"direction\").toUpperCase();\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n    console.error('Parameter gamepad identifier in condition: \"Gamepad stick pushed (axis)\", is not valid number, must be between 0 and 4.');\r\n    return;\r\n}\r\nif (stick != \"LEFT\" && stick != \"RIGHT\") {\r\n    console.error('Parameter stick in condition: \"Gamepad stick pushed (axis)\", is not valid, must be LEFT or RIGHT');\r\n    return;\r\n}\r\nif (direction != \"UP\" && direction != \"DOWN\" && direction != \"LEFT\" && direction != \"RIGHT\") {\r\n    console.error('Parameter deadzone in condition: \"Gamepad stick pushed (axis)\", is not valid, must be UP, DOWN, LEFT or RIGHT');\r\n    return;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) {\r\n    eventsFunctionContext.returnValue = false;\r\n    return;\r\n}\r\n\r\n\r\n//Define in onFirstSceneLoaded function\r\nconst getNormalizedAxisValue = gdjs._extensionController.getNormalizedAxisValue;\r\n\r\nswitch (stick) {\r\n    case 'LEFT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (getNormalizedAxisValue(gamepad.axes[0], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (getNormalizedAxisValue(gamepad.axes[0], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (getNormalizedAxisValue(gamepad.axes[1], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (getNormalizedAxisValue(gamepad.axes[1], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.error('The value Direction on stick Left on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n                eventsFunctionContext.returnValue = false;\r\n                break;\r\n        }\r\n        break;\r\n\r\n    case 'RIGHT':\r\n        switch (direction) {\r\n            case 'LEFT':\r\n                if (getNormalizedAxisValue(gamepad.axes[2], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'RIGHT':\r\n                if (getNormalizedAxisValue(gamepad.axes[2], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'UP':\r\n                if (getNormalizedAxisValue(gamepad.axes[3], playerId) < 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            case 'DOWN':\r\n                if (getNormalizedAxisValue(gamepad.axes[3], playerId) > 0) {\r\n                    eventsFunctionContext.returnValue = true;\r\n                    return;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                console.error('The value Direction on stick Right on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n                eventsFunctionContext.returnValue = false;\r\n                break;\r\n        }\r\n        break;\r\n\r\n    default:\r\n        console.error('The value Stick on the condition: \"Gamepad stick pushed (axis)\" is not valid.');\r\n        eventsFunctionContext.returnValue = false;\r\n        break;\r\n}\r\n\r\neventsFunctionContext.returnValue = false;\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Stick: \"LEFT\" or \"RIGHT\"",
              "longDescription": "",
              "name": "stick",
              "optional": false,
              "supplementaryInformation": "[\"LEFT\",\"RIGHT\"]",
              "type": "stringWithSelector"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Direction",
              "longDescription": "",
              "name": "direction",
              "optional": false,
              "supplementaryInformation": "[\"UP\",\"DOWN\",\"LEFT\",\"RIGHT\"]",
              "type": "stringWithSelector"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Return the number of connected gamepads.",
          "fullName": "Connected gamepads number",
          "functionType": "Expression",
          "name": "ConnectedGamepadsCount",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n// Gamepads can be disconnected and become null, so we have to filter them.\r\neventsFunctionContext.returnValue = Object.keys(gamepads).filter(key => !!gamepads[key]).length;\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Return a string containing informations about the specified gamepad.",
          "fullName": "Gamepad type",
          "functionType": "StringExpression",
          "name": "GamepadType",
          "private": false,
          "sentence": "Player _PARAM1_ use _PARAM2_ controller",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in string expression: \"Gamepad type\", is not valid number, must be between 0 and 4');\n    return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\neventsFunctionContext.returnValue = (gamepad && gamepad.id) ? gamepad.id : \"No information for player \" + (playerId + 1)\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if the specified gamepad has the specified information in its description. Useful to know if the gamepad is a Xbox or PS4 controller.",
          "fullName": "Gamepad type",
          "functionType": "Condition",
          "name": "C_Controller_type",
          "private": false,
          "sentence": "Gamepad _PARAM1_ is a _PARAM2_ controller",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameters\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\nconst controllerType = eventsFunctionContext.getArgument(\"controller_type\").toUpperCase();\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in condition: \"Gamepad type\", is not valid number, must be between 0 and 4.');\n    return;\n}\nif (controllerType === \"\") {\n    console.error('Parameter type in condition: \"Gamepad type\", is not a string.');\n    return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\neventsFunctionContext.returnValue = gamepad ? gamepad.id.toUpperCase().indexOf(controllerType) !== -1 : false;\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Type: \"Xbox\", \"PS4\", \"STEAM\" or \"PS3\" (among other)",
              "longDescription": "",
              "name": "controller_type",
              "optional": false,
              "supplementaryInformation": "",
              "type": "string"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if a gamepad is connected.",
          "fullName": "Gamepad connected",
          "functionType": "Condition",
          "name": "C_Controller_X_is_connected",
          "private": false,
          "sentence": "Gamepad _PARAM1_ is plugged and connected",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\n\nif (playerId < 0 || playerId > 4) {\n    console.error('Parameter gamepad identifier in condition: \"Gamepad connected\", is not valid number, must be between 0 and 4.');\n    return;\n}\n\n// If gamepad was disconnected it will be null (so this will return false)\n// If gamepad was never connected it will be undefined (so this will return false)\neventsFunctionContext.returnValue = !!gamepads[playerId];",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Generate a vibration on the specified controller. Might only work if the game is running in a recent web browser.",
          "fullName": "Gamepad vibration",
          "functionType": "Action",
          "name": "A_Vibrate_controller",
          "private": false,
          "sentence": "Make gamepad _PARAM1_ vibrate for _PARAM2_ seconds",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\n//Vibration work only on game in browser.\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameters\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\nconst duration = eventsFunctionContext.getArgument(\"duration\") || 1;\n\nif (playerId < 0 || playerId > 4) {\n  console.error('Parameter gamepad identifier in action: \"Gamepad connected\", is not valid number, must be between 0 and 4.');\n  return;\n}\n\nconst gamepad = gamepads[playerId];\n\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\nif (gamepad == null) return;\n\nif (gamepad && gamepad.vibrationActuator) {\n  gamepad.vibrationActuator.playEffect(\"dual-rumble\", {\n    startDelay: 0,\n    duration: duration * 1000,\n    weakMagnitude: 1.0,\n    strongMagnitude: 1.0\n  });\n}",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Time of the vibration, in seconds (optional, default value is 1)",
              "longDescription": "",
              "name": "duration",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "",
          "fullName": "",
          "functionType": "Action",
          "name": "onFirstSceneLoaded",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "//Define an new private object javascript for the gamepad extension\r\ngdjs._extensionController = {\r\n    players: {\r\n        0: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        1: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        2: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n        3: { mapping: 'DEFAULT', lastButtonUsed: -1, deadzone: 0.2, previousFrameStateButtons: {}, },\r\n    },\r\n    controllerButtonNames: { //Map associating controller button ids to button names\r\n        \"XBOX\": {\r\n            0: \"A\",\r\n            1: \"B\",\r\n            2: \"X\",\r\n            3: \"Y\",\r\n            4: \"LB\",\r\n            5: \"RB\",\r\n            6: \"LT\",\r\n            7: \"RT\",\r\n            8: \"BACK\",\r\n            9: \"START\",\r\n            10: \"CLICK_STICK_LEFT\",\r\n            11: \"CLICK_STICK_RIGHT\",\r\n            12: \"UP\",\r\n            13: \"DOWN\",\r\n            14: \"LEFT\",\r\n            15: \"RIGHT\",\r\n            16: \"NONE\",\r\n            17: \"NONE\"\r\n        },\r\n        \"PS4\": {\r\n            0: \"CROSS\",\r\n            1: \"CIRCLE\",\r\n            2: \"SQUARE\",\r\n            3: \"TRIANGLE\",\r\n            4: \"L1\",\r\n            5: \"R1\",\r\n            6: \"L2\",\r\n            7: \"R2\",\r\n            8: \"SHARE\",\r\n            9: \"OPTIONS\",\r\n            10: \"CLICK_STICK_LEFT\",\r\n            11: \"CLICK_STICK_RIGHT\",\r\n            12: \"UP\",\r\n            13: \"DOWN\",\r\n            14: \"LEFT\",\r\n            15: \"RIGHT\",\r\n            16: \"PS_BUTTON\",\r\n            17: \"CLICK_TOUCHPAD\"\r\n        }\r\n    }\r\n};\r\n\r\ngdjs._extensionController.getInputString = function (type, buttonId) {\r\n    const controllerButtonNames = gdjs._extensionController.controllerButtonNames;\r\n    if (controllerButtonNames[type] !== undefined) {\r\n        return controllerButtonNames[type][buttonId];\r\n    }\r\n\r\n    return \"UNKNOWN_BUTTON\";\r\n}\r\n\r\ngdjs._extensionController.axisToAngle = function (deltaX, deltaY) {\r\n    const rad = Math.atan2(deltaY, deltaX);\r\n    const deg = rad * (180 / Math.PI);\r\n    return deg;\r\n}\r\n\r\n//Returns the new value taking into account the dead zone for the player_ID given\r\ngdjs._extensionController.getNormalizedAxisValue = function (v, player_ID) {\r\n    //    gdjs._extensionController = gdjs._extensionController || { deadzone: 0.2 };\r\n\r\n    // Anything smaller than this is assumed to be 0,0\r\n    const DEADZONE = gdjs._extensionController.players[player_ID].deadzone;\r\n\r\n    if (Math.abs(v) < DEADZONE) {\r\n        // In the dead zone, set to 0\r\n        v = 0;\r\n\r\n        if (v == null) {\r\n            return 0;\r\n        } else {\r\n            return v;\r\n        }\r\n\r\n    } else {\r\n        // We're outside the dead zone, but we'd like to smooth\r\n        // this value out so it still runs nicely between 0..1.\r\n        // That is, we don't want it to jump suddenly from 0 to\r\n        // DEADZONE.\r\n\r\n        // Remap v from\r\n        //    DEADZONE..1 to 0..(1-DEADZONE)\r\n        // or from\r\n        //    -1..-DEADZONE to -(1-DEADZONE)..0\r\n\r\n        v = v - Math.sign(v) * DEADZONE;\r\n\r\n        // Remap v from\r\n        //    0..(1-DEADZONE) to 0..1\r\n        // or from\r\n        //    -(1-DEADZONE)..0 to -1..0\r\n\r\n        return v / (1 - DEADZONE);\r\n    }\r\n};",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "",
          "fullName": "",
          "functionType": "Action",
          "name": "onScenePostEvents",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "//Each time a player press a button i save the last button pressed for the next frame\n/** @type {Gamepad[]} */\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n\n//Get function parameter\nlet countPlayers = Object.keys(gdjs._extensionController.players).length;\n\n//Repeat for each players\nfor (let i = 0; i < countPlayers; i++) {\n    let gamepad = gamepads[i]; // Get the gamepad of the player\n\n    //we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\n    if (gamepad == null) {\n        return;\n    }\n\n    for (let b = 0; b < Object.keys(gamepad.buttons).length; b++) { //For each buttons\n        if (gamepad.buttons[b].pressed) { //One of them is pressed\n            gdjs._extensionController.players[i].lastButtonUsed = b; //Save the button pressed\n\n            //Save the state of the button for the next frame.\n            gdjs._extensionController.players[i].previousFrameStateButtons[b] = { pressed: true };\n        }\n    }\n}\n\n\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Check if any button is released on a gamepad.",
          "fullName": "Any gamepad button released",
          "functionType": "Condition",
          "name": "C_any_button_released",
          "private": false,
          "sentence": "Any button of gamepad _PARAM1_ is released",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "/** @type {Gamepad[]} */\r\nconst gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\r\n\r\n//Get function parameters\r\nconst playerId = eventsFunctionContext.getArgument(\"player_ID\") - 1;\r\n\r\nif (playerId < 0 || playerId > 4) {\r\n\tconsole.error('Parameter gamepad identifier in condition: \"Any gamepad button released\", is not valid number, must be between 0 and 4.');\r\n\treturn;\r\n}\r\n\r\nconst gamepad = gamepads[playerId];\r\n\r\n//we need keep this condition because when use have not yet plug her controller we can't get the controller in the gamepad variable.\r\nif (gamepad == null) return;\r\n\r\nfor (let buttonId = 0; buttonId < gamepad.buttons.length; buttonId++) { //For each buttons on current frame.\r\n\r\n\tif (buttonId === undefined) {\r\n\t\teventsFunctionContext.returnValue = false;\r\n\t\treturn;\r\n\t}\r\n\r\n\t//Get previous value or define value by default for the current button\r\n\tgdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId] || { pressed: false };\r\n\r\n\t//Get state of the button at previous frame\r\n\tconst previousStateButtonIsPressed = gdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed;\r\n\r\n\t//Get the state of the button on the current frame.\r\n\tconst currentFrameStateButtonIsPressed = gamepad.buttons[buttonId].pressed;\r\n\r\n\t//When previousStateButtonIsPressed is true and actual button state is not pressed\r\n\t//Player have release the button\r\n\tif (previousStateButtonIsPressed === true && currentFrameStateButtonIsPressed === false) {\r\n\t\tgdjs._extensionController.players[playerId].previousFrameStateButtons[buttonId].pressed = false;\r\n\t\teventsFunctionContext.returnValue = true;\r\n\t\t//break;\r\n\t\treturn;\r\n\t} else {\r\n\t\teventsFunctionContext.returnValue = false;\r\n\t}\r\n\r\n\tif (currentFrameStateButtonIsPressed) gdjs._extensionController.players[playerId].lastButtonUsed = buttonId;\r\n}\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The gamepad identifier: 1, 2, 3 or 4",
              "longDescription": "",
              "name": "player_ID",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "Elairyx, @Bouh",
      "description": "Allows to set up checkpoints for each instance.\nCheckpoint coordinates are dynamic values so can be object positions absolute/relative values and more.\nCheckpoints can then be used to move the same or even other instances to them.",
      "extensionNamespace": "",
      "fullName": "Checkpoints",
      "helpPath": "",
      "iconUrl": "",
      "name": "Checkpoints",
      "previewIconUrl": "",
      "shortDescription": "A position checkpoint for instances.",
      "version": "1.0.0",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Update a checkpoint of an object.",
          "fullName": "Save checkpoint",
          "functionType": "Action",
          "name": "SaveCheckpoint",
          "private": false,
          "sentence": "Save checkpoint _PARAM4_ of _PARAM1_ to _PARAM2_ (x-axis), _PARAM3_ (y-axis)",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "ToSaveObject",
                    "__Checkpoints.Position[\"X\"+GetArgumentAsString(\"CheckpointName\")]",
                    "=",
                    "GetArgumentAsNumber(\"CoordinateX\")"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "ModVarObjet"
                  },
                  "parameters": [
                    "ToSaveObject",
                    "__Checkpoints.Position[\"Y\"+GetArgumentAsString(\"CheckpointName\")]",
                    "=",
                    "GetArgumentAsNumber(\"CoordinateY\")"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Save checkpoint of object",
              "longDescription": "",
              "name": "ToSaveObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "X position",
              "longDescription": "",
              "name": "CoordinateX",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Y position",
              "longDescription": "",
              "name": "CoordinateY",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Checkpoint name",
              "longDescription": "",
              "name": "CheckpointName",
              "optional": false,
              "supplementaryInformation": "[\"Primary\",\"Secondary\"]",
              "type": "string"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Change the position of the object to the saved checkpoint.",
          "fullName": "Load checkpoint",
          "functionType": "Action",
          "name": "LoadCheckpoint",
          "private": false,
          "sentence": "Move _PARAM2_ to checkpoint _PARAM3_ of _PARAM1_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::And"
                      },
                      "parameters": [],
                      "subInstructions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ObjectVariableChildExists"
                          },
                          "parameters": [
                            "ToLoadObject",
                            "__Checkpoints.Position",
                            "\"X\" + GetArgumentAsString(\"CheckpointName\")"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ObjectVariableChildExists"
                          },
                          "parameters": [
                            "ToLoadObject",
                            "__Checkpoints.Position",
                            "\"Y\" + GetArgumentAsString(\"CheckpointName\")"
                          ],
                          "subInstructions": []
                        }
                      ]
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::And"
                      },
                      "parameters": [],
                      "subInstructions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "StrEqual"
                          },
                          "parameters": [
                            "GetArgumentAsString(\"SetIgnoreUndefined\")",
                            "!=",
                            "\"true\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "BuiltinCommonInstructions::Or"
                          },
                          "parameters": [],
                          "subInstructions": [
                            {
                              "type": {
                                "inverted": true,
                                "value": "ObjectVariableChildExists"
                              },
                              "parameters": [
                                "ToLoadObject",
                                "__Checkpoints.Position",
                                "\"Y\" + GetArgumentAsString(\"CheckpointName\")"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": true,
                                "value": "ObjectVariableChildExists"
                              },
                              "parameters": [
                                "ToLoadObject",
                                "__Checkpoints.Position",
                                "\"X\" + GetArgumentAsString(\"CheckpointName\")"
                              ],
                              "subInstructions": []
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "MettreXY"
                  },
                  "parameters": [
                    "ToMoveObject",
                    "=",
                    "ToLoadObject.Variable(__Checkpoints.Position[\"X\" + GetArgumentAsString(\"CheckpointName\")])",
                    "=",
                    "ToLoadObject.Variable(__Checkpoints.Position[\"Y\" + GetArgumentAsString(\"CheckpointName\")])"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Load checkpoint from object",
              "longDescription": "",
              "name": "ToLoadObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Change position of object",
              "longDescription": "",
              "name": "ToMoveObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Checkpoint name",
              "longDescription": "",
              "name": "CheckpointName",
              "optional": false,
              "supplementaryInformation": "[\"Primary\",\"Secondary\"]",
              "type": "string"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Ignore (possibly) empty checkpoints",
              "longDescription": "Loading not yet saved checkpoints will (by default) set the position to the coordinate 0;0. Select \"yes\" to completely ignore non-existant checkpoints. To define an alternative checkpoint for it, create a new event and use the \"Checkpoint exists\" condition, save the wanted checkpoint as the action.",
              "name": "SetIgnoreUndefined",
              "optional": false,
              "supplementaryInformation": "[\"Set to 0\",\"Ignore\",\"Reset to initial position\"]",
              "type": "yesorno"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if a checkpoint has a position saved / does exist.",
          "fullName": "Checkpoint exists",
          "functionType": "Condition",
          "name": "CheckpointExist",
          "private": false,
          "sentence": "Checkpoint _PARAM2_ of _PARAM1_ exists",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "ObjectVariableChildExists"
                  },
                  "parameters": [
                    "ToCheckObject",
                    "__Checkpoints.Position",
                    "\"Y\" + GetArgumentAsString(\"CheckpointName\")"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "ObjectVariableChildExists"
                  },
                  "parameters": [
                    "ToCheckObject",
                    "__Checkpoints.Position",
                    "\"X\" + GetArgumentAsString(\"CheckpointName\")"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            },
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "BuiltinCommonInstructions::Or"
                  },
                  "parameters": [],
                  "subInstructions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "ObjectVariableChildExists"
                      },
                      "parameters": [
                        "ToCheckObject",
                        "__Checkpoints.Position",
                        "\"X\" + GetArgumentAsString(\"CheckpointName\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": true,
                        "value": "ObjectVariableChildExists"
                      },
                      "parameters": [
                        "ToCheckObject",
                        "__Checkpoints.Position",
                        "\"Y\" + GetArgumentAsString(\"CheckpointName\")"
                      ],
                      "subInstructions": []
                    }
                  ]
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "False"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Check checkpoint from object",
              "longDescription": "",
              "name": "ToCheckObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Checkpoint name",
              "longDescription": "",
              "name": "CheckpointName",
              "optional": false,
              "supplementaryInformation": "",
              "type": "string"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "Ahnaf30e",
      "description": "Adds expressions to get the current FPS and a behavior to display the current FPS easily.\n\nThe FPS, Frames Per Second, describes how many times in the last second your game got updated. An update consists in running all the behaviors, objects, and events sheet code, before rendering the new game state into the game window. The higher the FPS, the more it manages to update in a second, influencing how fluid and performant your game looks.",
      "extensionNamespace": "",
      "fullName": "FPS",
      "helpPath": "",
      "iconUrl": "",
      "name": "FPS",
      "previewIconUrl": "",
      "shortDescription": "Adds expressions and a behavior to get and display the game FPS.",
      "version": "1.0.0",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Return your game's current FPS count.",
          "fullName": "FPS (Frames per second)",
          "functionType": "Expression",
          "name": "FPS",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "ceil(1/TimeDelta())"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Return your game's current FPS count, with more control over rounding.",
          "fullName": "Precise FPS (Frames per second)",
          "functionType": "Expression",
          "name": "PreciseFPS",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnNumber"
                  },
                  "parameters": [
                    "(ceil(1/TimeDelta()*(GetArgumentAsNumber(\"accuracy\") * 10))) / (GetArgumentAsNumber(\"accuracy\") * 10)"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "The accuracy of the FPS",
              "longDescription": "This tells how many numbers after the period should be shown.",
              "name": "accuracy",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": [
        {
          "description": "Makes a text object display the current FPS.",
          "fullName": "FPS Displayer",
          "name": "FPSDisplayer",
          "objectType": "TextObject::Text",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPreEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "TextObject::String"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "Object.Behavior::Propertyprefix() + ToString(FPS::FPS())"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "FPS::FPSDisplayer",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "FPS: ",
              "type": "String",
              "label": "The prefix before the FPS count",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "prefix"
            }
          ]
        }
      ]
    },
    {
      "author": "VegeTato, Tristan Rhodes (https://victrisgames.itch.io/)",
      "description": "Run the provided action (*on every frame*, i.e: without a condition) to make the orbiting objects move.\nThe extension will take care of creating/deleting orbiting objects to match the quantity specified. \nUse the delete function or set the quantity to 0 to remove orbiting objects.\n\nThe customizable parameters include:\n- Which center object to use\n- Orbiting object (cannot be the same object used for the Center object)\n- Quantity of orbiting objects\n- Distance from the center object\n- Speed of the orbiting objects (in degrees per second).  Use negative numbers to orbit counter-clockwise.\n- Speed to rotate each orbiting object (in degrees per second).  Use negative numbers to rotate counter-clockwise.\n\nExample uses:\n- Make shield objects around the player to protect from enemies\n- Weapons that can damage enemies when they collide\n- Can be used on both player and NPC objects \n- A visual indicator of ammo quantity or health points\n- Interesting animations that can function as a single entity (try using short orbit distances)\n- Visual cue for an active character power-up, such as invincibility",
      "extensionNamespace": "",
      "fullName": "Make objects orbit around a center object",
      "helpPath": "",
      "iconUrl": "",
      "name": "OrbitingObjects",
      "previewIconUrl": "",
      "shortDescription": "Make objects orbit around a center object. You can customize the number of objects, speed, etc...",
      "version": "0.5.1",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Make objects orbit around a center object.  Objects will be automatically created/deleted to match the quantity.",
          "fullName": "Make objects orbit around a center object",
          "functionType": "Action",
          "name": "AnimateOrbitingObjects",
          "private": false,
          "sentence": "Animate _PARAM3_ copies of _PARAM2_ that orbit around _PARAM1_ at a distance of _PARAM5_ with orbit speed of _PARAM4_ degrees per second. Rotate orbiting objects at _PARAM6_ degrees per second.  Start objects with an angle offset of _PARAM9_ degrees.  Create objects on layer _PARAM7_ with Z value _PARAM8_.  Reset locations of orbiting objects after quantity is reduced: _PARAM10_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::ForEach",
              "object": "CenterObject",
              "conditions": [],
              "actions": [],
              "events": [
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Count the number of linked objects (always)",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Note:  Must use the Action form of \"Take into account\" so that this variable is set to 0 when there are no linked objects",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "LinkedObjects::PickObjectsLinkedTo"
                          },
                          "parameters": [
                            "",
                            "OrbitingObject",
                            "CenterObject"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "CenterObject",
                            "LinkedObjectQuantity",
                            "=",
                            "Count(OrbitingObject)"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Create orbiting objects (if needed)",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarObjet"
                          },
                          "parameters": [
                            "CenterObject",
                            "LinkedObjectQuantity",
                            "<",
                            "GetArgumentAsNumber(\"OrbitQuantity\")"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "infiniteLoopWarning": true,
                          "type": "BuiltinCommonInstructions::While",
                          "whileConditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "CenterObject",
                                "LinkedObjectQuantity",
                                "<",
                                "GetArgumentAsNumber(\"OrbitQuantity\")"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "conditions": [],
                          "actions": [],
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Create orbiting objects and link them to the center object",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "Create"
                                  },
                                  "parameters": [
                                    "",
                                    "OrbitingObject",
                                    "CenterObject.X()",
                                    "CenterObject.Y()",
                                    "GetArgumentAsString(\"OrbitLayer\")"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "LinkedObjects::LinkObjects"
                                  },
                                  "parameters": [
                                    "",
                                    "OrbitingObject",
                                    "CenterObject"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ChangePlan"
                                  },
                                  "parameters": [
                                    "OrbitingObject",
                                    "=",
                                    "GetArgumentAsNumber(\"OrbitZvalue\")"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Update counter",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "LinkedObjects::PickObjectsLinkedTo"
                                  },
                                  "parameters": [
                                    "",
                                    "OrbitingObject",
                                    "CenterObject"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarObjet"
                                  },
                                  "parameters": [
                                    "CenterObject",
                                    "LinkedObjectQuantity",
                                    "=",
                                    "Count(OrbitingObject)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Reassign OrbitOrder",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "CenterObject",
                                "OrbitingObjects.OrderCounter",
                                "=",
                                "1"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::ForEach",
                          "object": "OrbitingObject",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "LinkedObjects::PickObjectsLinkedTo"
                              },
                              "parameters": [
                                "",
                                "OrbitingObject",
                                "CenterObject"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [],
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarObjet"
                                  },
                                  "parameters": [
                                    "OrbitingObject",
                                    "OrbitOrder",
                                    "=",
                                    "CenterObject.Variable(OrbitingObjects.OrderCounter)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarObjet"
                                  },
                                  "parameters": [
                                    "CenterObject",
                                    "OrbitingObjects.OrderCounter",
                                    "+",
                                    "1"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Match the angle used by the rest of the orbiting objects",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SetAngle"
                                  },
                                  "parameters": [
                                    "OrbitingObject",
                                    "=",
                                    "CenterObject.Variable(OrbitingObjects.RotationAngle)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Spread out orbiting objects evenly",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "OrbitAngle",
                                "=",
                                "OrbitingObject.Variable(OrbitOrder) * (360/GetArgumentAsNumber(\"OrbitQuantity\")) + GetArgumentAsNumber(\"StartingOffset\")"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Delete orbiting objects (if needed)",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarObjet"
                          },
                          "parameters": [
                            "CenterObject",
                            "LinkedObjectQuantity",
                            ">",
                            "GetArgumentAsNumber(\"OrbitQuantity\")"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::ForEach",
                          "object": "OrbitingObject",
                          "conditions": [],
                          "actions": [],
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "LinkedObjects::PickObjectsLinkedTo"
                                  },
                                  "parameters": [
                                    "",
                                    "OrbitingObject",
                                    "CenterObject"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarObjet"
                                  },
                                  "parameters": [
                                    "OrbitingObject",
                                    "OrbitOrder",
                                    ">",
                                    "GetArgumentAsNumber(\"OrbitQuantity\")"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "Delete"
                                  },
                                  "parameters": [
                                    "OrbitingObject",
                                    ""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ]
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Spread out orbiting objects evenly",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "GetArgumentAsBoolean"
                              },
                              "parameters": [
                                "\"ResetObjectsAfterDeletion\""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "OrbitAngle",
                                "=",
                                "OrbitingObject.Variable(OrbitOrder) * (360/GetArgumentAsNumber(\"OrbitQuantity\")) + GetArgumentAsNumber(\"StartingOffset\")"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Move orbiting objects (always)",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::ForEach",
                      "object": "OrbitingObject",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "LinkedObjects::PickObjectsLinkedTo"
                          },
                          "parameters": [
                            "",
                            "OrbitingObject",
                            "CenterObject"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Calculate new angle for this frame",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "OrbitAngle",
                                "+",
                                "GetArgumentAsNumber(\"OrbitSpeed\")*TimeDelta()"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Keep the angle between (0 to 360)",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "OrbitAngle",
                                ">",
                                "360"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "OrbitAngle",
                                "=",
                                "mod(OrbitingObject.Variable(OrbitAngle),360)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Move object to new angle",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "MettreAutour"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "CenterObject",
                                "GetArgumentAsNumber(\"OrbitDistance\")",
                                "OrbitingObject.Variable(OrbitAngle)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Change angle of rotating objects",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "Rotate"
                              },
                              "parameters": [
                                "OrbitingObject",
                                "GetArgumentAsNumber(\"ObjectRotationSpeed\")",
                                ""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Save the current angle so it can be used for new orbiting objects",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "CenterObject",
                                "OrbitingObjects.RotationAngle",
                                "=",
                                "OrbitingObject.Angle()"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                }
              ]
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Center object",
              "longDescription": "",
              "name": "CenterObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Orbiting object",
              "longDescription": "Cannot be the same object used for the Center object",
              "name": "OrbitingObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Quantity of orbiting objects",
              "longDescription": "",
              "name": "OrbitQuantity",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Orbit speed (in degrees per second)",
              "longDescription": "Use negative numbers to orbit counter-clockwise",
              "name": "OrbitSpeed",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Distance from the center object (in pixels)",
              "longDescription": "",
              "name": "OrbitDistance",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Angular speed (in degrees per second)",
              "longDescription": "Use negative numbers to rotate counter-clockwise",
              "name": "ObjectRotationSpeed",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Layer that orbiting objects will be created on (base layer if empty)",
              "longDescription": "",
              "name": "OrbitLayer",
              "optional": false,
              "supplementaryInformation": "",
              "type": "layer"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Z order of orbiting objects",
              "longDescription": "",
              "name": "OrbitZvalue",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Starting angle offset (in degrees)",
              "longDescription": "",
              "name": "StartingOffset",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Reset locations of orbiting objects after quantity is reduced",
              "longDescription": "",
              "name": "ResetObjectsAfterDeletion",
              "optional": false,
              "supplementaryInformation": "",
              "type": "yesorno"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Delete orbiting objects that are linked to a center object.",
          "fullName": "Delete orbiting objects that are linked to a center object",
          "functionType": "Action",
          "name": "DeleteOrbitingObjects",
          "private": false,
          "sentence": "Delete all _PARAM2_ that are linked to _PARAM1_",
          "events": [
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Delete objects",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Delete orbiting objects",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "LinkedObjects::PickObjectsLinkedTo"
                      },
                      "parameters": [
                        "",
                        "OrbitingObject",
                        "CenterObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Delete"
                      },
                      "parameters": [
                        "OrbitingObject",
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Center object",
              "longDescription": "",
              "name": "CenterObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Orbiting object",
              "longDescription": "Cannot be the same object that was used for the Center object",
              "name": "OrbitingObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "VegeTato",
      "description": "Reflection extension is useful when it comes to reflecting objects, like a player walking on water/glass/beach.\nAn action let you set the reflection for specific objects with a lot of options:\n\n- The reflection opacity\n- Reflective surface object\n- Z order of the reflection\n- An option to turn ON/OFF to delete the reflection when it touch the original object\n- Touch distance to delete the reflection\n- Layer to create the reflection on",
      "extensionNamespace": "",
      "fullName": "Reflection",
      "helpPath": "",
      "iconUrl": "",
      "name": "Reflection",
      "previewIconUrl": "",
      "shortDescription": "Add a reflection to a selected object.",
      "version": "0.0.4",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Reflect your object.",
          "fullName": "Add reflection to object",
          "functionType": "Action",
          "name": "Reflect",
          "private": false,
          "sentence": "Create reflection _PARAM1_ of _PARAM2_ at distance _PARAM3_ and _PARAM4_ opacity on the floor _PARAM5_ at Zorder _PARAM6_ and layer _PARAM7_ delete on touch _PARAM8_ touch distance _PARAM9_",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "BuiltinCommonInstructions::Once"
                  },
                  "parameters": [],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "Create"
                  },
                  "parameters": [
                    "",
                    "ReflectionObject",
                    "PrimaryObject.X()",
                    "PrimaryObject.Y()",
                    "GetArgumentAsString(\"Layer\")"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "FlipY"
                  },
                  "parameters": [
                    "ReflectionObject",
                    "yes"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "Opacity"
                  },
                  "parameters": [
                    "ReflectionObject",
                    "=",
                    "GetArgumentAsNumber(\"Opacity\")"
                  ],
                  "subInstructions": []
                },
                {
                  "type": {
                    "inverted": false,
                    "value": "ChangePlan"
                  },
                  "parameters": [
                    "ReflectionObject",
                    "=",
                    "PrimaryObject.ZOrder()-1"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Each frame",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "MettreX"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "PrimaryObject.X()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ChangeAnimation"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "PrimaryObject.Animation()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ChangeSprite"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "PrimaryObject.Sprite()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ChangeWidth"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "PrimaryObject.Width()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ChangeHeight"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "PrimaryObject.Height()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetAngle"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "-PrimaryObject.Angle()"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Visible"
                      },
                      "parameters": [
                        "PrimaryObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Montre"
                      },
                      "parameters": [
                        "ReflectionObject",
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "Visible"
                      },
                      "parameters": [
                        "PrimaryObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Cache"
                      },
                      "parameters": [
                        "ReflectionObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "FlippedX"
                      },
                      "parameters": [
                        "PrimaryObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "FlipX"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "yes"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": true,
                        "value": "FlippedX"
                      },
                      "parameters": [
                        "PrimaryObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "FlipX"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "no"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Egal"
                      },
                      "parameters": [
                        "GetArgumentAsNumber(\"Distance\")",
                        ">=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "MettreY"
                      },
                      "parameters": [
                        "ReflectionObject",
                        "=",
                        "ReflectiveSurface.Y()-(PrimaryObject.Y()-ReflectiveSurface.Y())-PrimaryObject.Height()+GetArgumentAsNumber(\"Distance\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Egal"
                      },
                      "parameters": [
                        "ReflectionObject.Y()",
                        ">=",
                        "PrimaryObject.Y()+GetArgumentAsNumber(\"DeleteDistance\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Montre"
                      },
                      "parameters": [
                        "ReflectionObject",
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Egal"
                      },
                      "parameters": [
                        "ReflectionObject.Y()",
                        "<=",
                        "PrimaryObject.Y()+GetArgumentAsNumber(\"DeleteDistance\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "Cache"
                      },
                      "parameters": [
                        "ReflectionObject"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "GetArgumentAsBoolean"
                          },
                          "parameters": [
                            "\"Remove\""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "Delete"
                          },
                          "parameters": [
                            "ReflectionObject",
                            ""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Reflection object",
              "longDescription": "A different object than the original object",
              "name": "ReflectionObject",
              "optional": false,
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Original object",
              "longDescription": "",
              "name": "PrimaryObject",
              "optional": false,
              "supplementaryInformation": "Sprite",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "(Optional) Distance offset",
              "longDescription": "Distance in pixel, default: 0px",
              "name": "Distance",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "(Optional) Reflection opacity",
              "longDescription": "Between 0 transparent to 255 opaque",
              "name": "Opacity",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Reflective surface object",
              "longDescription": "",
              "name": "ReflectiveSurface",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Reflection object Z order",
              "longDescription": "",
              "name": "Zorder",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Layer to create the reflection (Base layer by default)",
              "longDescription": "",
              "name": "Layer",
              "optional": false,
              "supplementaryInformation": "",
              "type": "layer"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Delete reflection when it collides with the original object (default: no)",
              "longDescription": "",
              "name": "Remove",
              "optional": false,
              "supplementaryInformation": "",
              "type": "yesorno"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Distance before removing the reflection",
              "longDescription": "Distance between the reflection and the original object before deleting the reflection (0 by default for immediate delete when touch)",
              "name": "DeleteDistance",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "(Optional) Between 0 transparent to 255 opaque",
              "longDescription": "",
              "name": "FloorOpacity",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "4ian",
      "description": "Behaviors to animate Tiled Sprite objects in the background, following the camera with a parallax effect.",
      "extensionNamespace": "",
      "fullName": "Parallax for Tiled Sprite",
      "helpPath": "",
      "iconUrl": "",
      "name": "Parallax",
      "previewIconUrl": "",
      "shortDescription": "Behaviors to animate Tiled Sprite objects in the background, following the camera with a parallax effect.",
      "version": "1.0.1",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [],
      "eventsBasedBehaviors": [
        {
          "description": "Move the image of a Tiled Sprite to follow the camera horizontally with a parallax effect. After adding this to an object, put the object on a layer that is not moving, behind the layer that is followed (for example, a layer called \"Background\").",
          "fullName": "Horizontal Parallax for a Tiled Sprite",
          "name": "HorizontalTiledSpriteParallax",
          "objectType": "TiledSpriteObject::TiledSprite",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPostEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "TiledSpriteObject::XOffset"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "CameraX(Object.Behavior::PropertyFollowedLayer(), 0) * Object.Behavior::PropertyParallaxFactor()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "MettreX"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "TiledSpriteObject::Width"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "CameraWidth(Object.Layer(), 0)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TiledSpriteObject::TiledSprite",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "Parallax::HorizontalTiledSpriteParallax",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "0.5",
              "type": "Number",
              "label": "Parallax factor (speed for the parallax, usually between 0 and 1)",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "ParallaxFactor"
            },
            {
              "value": "",
              "type": "String",
              "label": "Layer to be followed (leave empty for the base layer)",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "FollowedLayer"
            }
          ]
        },
        {
          "description": "Move the image of a Tiled Sprite to follow the camera vertically with a parallax effect. After adding this to an object, put the object on a layer that is not moving, behind the layer that is followed (for example, a layer called \"Background\").",
          "fullName": "Vertical Parallax for a Tiled Sprite",
          "name": "VerticalTiledSpriteParallax",
          "objectType": "TiledSpriteObject::TiledSprite",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPostEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "TiledSpriteObject::YOffset"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "CameraY(Object.Behavior::PropertyFollowedLayer(), 0) * Object.Behavior::PropertyParallaxFactor()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "MettreY"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "TiledSpriteObject::Height"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "CameraHeight(Object.Layer(), 0)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TiledSpriteObject::TiledSprite",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "Parallax::VerticalTiledSpriteParallax",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "0.5",
              "type": "Number",
              "label": "Parallax factor (speed for the parallax, usually between 0 and 1)",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "ParallaxFactor"
            },
            {
              "value": "",
              "type": "String",
              "label": "Layer to be followed (leave empty for the base layer)",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "FollowedLayer"
            }
          ]
        }
      ]
    },
    {
      "author": "Lim98SE",
      "description": "This extension provide two behaviors:\n\n- Turn object into cursor\nMake the object as the new cursor\n\n- Clickable button \nProvide a new condition on the object for fast checking is this one has been clicked.",
      "extensionNamespace": "",
      "fullName": "Mouse Helper",
      "helpPath": "",
      "iconUrl": "",
      "name": "MouseHelper",
      "previewIconUrl": "",
      "shortDescription": "Check if a sprite has been clicked and turn any objects into a cursor.",
      "version": "1.0.0",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [],
      "eventsBasedBehaviors": [
        {
          "description": "An easy way to turn any object into a mouse cursor.",
          "fullName": "Turn sprite into cursor",
          "name": "cursor",
          "objectType": "",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPreEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "DepartScene"
                      },
                      "parameters": [
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "CacheSouris"
                      },
                      "parameters": [
                        ""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Montre"
                      },
                      "parameters": [
                        "Object",
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "MettreXY"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "MouseX()",
                        "=",
                        "MouseY()"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "MouseHelper::cursor",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "onActivate",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "CacheSouris"
                      },
                      "parameters": [
                        ""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Montre"
                      },
                      "parameters": [
                        "Object",
                        ""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "MouseHelper::cursor",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "onDeActivate",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "MontreSouris"
                      },
                      "parameters": [
                        ""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "Cache"
                      },
                      "parameters": [
                        "Object"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "MouseHelper::cursor",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": []
        },
        {
          "description": "Turns any object into a button, useful to know if it has been clicked with a simple object condition.",
          "fullName": "Clickable button ",
          "name": "button",
          "objectType": "",
          "eventsFunctions": [
            {
              "description": "Check if the object is clicked.",
              "fullName": "Is Clicked?",
              "functionType": "Condition",
              "name": "isClicked",
              "private": false,
              "sentence": "_PARAM0_ is clicked",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SourisSurObjet"
                      },
                      "parameters": [
                        "Object",
                        "",
                        "",
                        ""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "MouseButtonPressed"
                      },
                      "parameters": [
                        "",
                        "Left"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "MouseHelper::button",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": []
        }
      ]
    },
    {
      "author": "Arthur Pacaud (arthuro555)",
      "description": "If you have a big file, you might want to make it smaller. \nUsing the well know zip compression algorithm, you can minimify strings and restore them later with this extension.",
      "extensionNamespace": "",
      "fullName": "Compressor",
      "helpPath": "",
      "iconUrl": "",
      "name": "Compressor",
      "previewIconUrl": "",
      "shortDescription": "Compress and decompress strings.",
      "version": "1.0.1",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "",
          "fullName": "",
          "functionType": "Action",
          "name": "onFirstSceneLoaded",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "// Removed String-Buffer conversion functions from https://github.com/nodeca/pako/commit/23563dfae92cec9223804311a16636477ea6d7ab\n\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\nfunction shrinkBuf(buf, size) {\n    if (buf.length === size) { return buf; }\n    if (buf.subarray) { return buf.subarray(0, size); }\n    buf.length = size;\n    return buf;\n};\n\nfunction buf2binstring(buf) {\n    const len = buf.length;\n    // On Chrome, the arguments in a function call that are allowed is `65534`.\n    // If the length of the buffer is smaller than that, we can use this optimization,\n    // otherwise we will take a slower path.\n    if (len < 65534 && STR_APPLY_UIA_OK) {\n        return String.fromCharCode.apply(null, shrinkBuf(buf, len));\n    }\n    let result = '';\n    for (let i = 0; i < len; i++) {\n        result += String.fromCharCode(buf[i]);\n    }\n    return result;\n}\n\nfunction binstring2buf(str) {\n    const buf = new Uint8Array(str.length);\n    for (let i = 0, len = buf.length; i < len; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n    return buf;\n};\n\ngdjs._pakoTools = { binstring2buf, buf2binstring };\n\n/* This is Pako v2.0.4, find it on https://github.com/nodeca/pako. */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e((t=\"undefined\"!=typeof globalThis?globalThis:t||self).pako={})}(this,(function(t){\"use strict\";function e(t){let e=t.length;for(;--e>=0;)t[e]=0}const a=256,i=286,n=30,s=15,r=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),l=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),o=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),h=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),d=new Array(576);e(d);const _=new Array(60);e(_);const f=new Array(512);e(f);const c=new Array(256);e(c);const u=new Array(29);e(u);const w=new Array(n);function b(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let g,p,m;function k(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}e(w);const v=t=>t<256?f[t]:f[256+(t>>>7)],y=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},x=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,y(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},z=(t,e,a)=>{x(t,a[2*e],a[2*e+1])},A=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},E=(t,e,a)=>{const i=new Array(16);let n,r,l=0;for(n=1;n<=s;n++)i[n]=l=l+a[n-1]<<1;for(r=0;r<=e;r++){let e=t[2*r+1];0!==e&&(t[2*r]=A(i[e]++,e))}},R=t=>{let e;for(e=0;e<i;e++)t.dyn_ltree[2*e]=0;for(e=0;e<n;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0},Z=t=>{t.bi_valid>8?y(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},U=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},S=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&U(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!U(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},D=(t,e,i)=>{let n,s,o,h,d=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],s=t.pending_buf[t.l_buf+d],d++,0===n?z(t,s,e):(o=c[s],z(t,o+a+1,e),h=r[o],0!==h&&(s-=u[o],x(t,s,h)),n--,o=v(n),z(t,o,i),h=l[o],0!==h&&(n-=w[o],x(t,n,h)))}while(d<t.last_lit);z(t,256,e)},T=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,r=e.stat_desc.elems;let l,o,h,d=-1;for(t.heap_len=0,t.heap_max=573,l=0;l<r;l++)0!==a[2*l]?(t.heap[++t.heap_len]=d=l,t.depth[l]=0):a[2*l+1]=0;for(;t.heap_len<2;)h=t.heap[++t.heap_len]=d<2?++d:0,a[2*h]=1,t.depth[h]=0,t.opt_len--,n&&(t.static_len-=i[2*h+1]);for(e.max_code=d,l=t.heap_len>>1;l>=1;l--)S(t,a,l);h=r;do{l=t.heap[1],t.heap[1]=t.heap[t.heap_len--],S(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=l,t.heap[--t.heap_max]=o,a[2*h]=a[2*l]+a[2*o],t.depth[h]=(t.depth[l]>=t.depth[o]?t.depth[l]:t.depth[o])+1,a[2*l+1]=a[2*o+1]=h,t.heap[1]=h++,S(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,r=e.stat_desc.has_stree,l=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,h=e.stat_desc.max_length;let d,_,f,c,u,w,b=0;for(c=0;c<=s;c++)t.bl_count[c]=0;for(a[2*t.heap[t.heap_max]+1]=0,d=t.heap_max+1;d<573;d++)_=t.heap[d],c=a[2*a[2*_+1]+1]+1,c>h&&(c=h,b++),a[2*_+1]=c,_>i||(t.bl_count[c]++,u=0,_>=o&&(u=l[_-o]),w=a[2*_],t.opt_len+=w*(c+u),r&&(t.static_len+=w*(n[2*_+1]+u)));if(0!==b){do{for(c=h-1;0===t.bl_count[c];)c--;t.bl_count[c]--,t.bl_count[c+1]+=2,t.bl_count[h]--,b-=2}while(b>0);for(c=h;0!==c;c--)for(_=t.bl_count[c];0!==_;)f=t.heap[--d],f>i||(a[2*f+1]!==c&&(t.opt_len+=(c-a[2*f+1])*a[2*f],a[2*f+1]=c),_--)}})(t,e),E(a,d,t.bl_count)},O=(t,e,a)=>{let i,n,s=-1,r=e[1],l=0,o=7,h=4;for(0===r&&(o=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++l<o&&n===r||(l<h?t.bl_tree[2*n]+=l:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):l<=10?t.bl_tree[34]++:t.bl_tree[36]++,l=0,s=n,0===r?(o=138,h=3):n===r?(o=6,h=3):(o=7,h=4))},I=(t,e,a)=>{let i,n,s=-1,r=e[1],l=0,o=7,h=4;for(0===r&&(o=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++l<o&&n===r)){if(l<h)do{z(t,n,t.bl_tree)}while(0!=--l);else 0!==n?(n!==s&&(z(t,n,t.bl_tree),l--),z(t,16,t.bl_tree),x(t,l-3,2)):l<=10?(z(t,17,t.bl_tree),x(t,l-3,3)):(z(t,18,t.bl_tree),x(t,l-11,7));l=0,s=n,0===r?(o=138,h=3):n===r?(o=6,h=3):(o=7,h=4)}};let F=!1;const L=(t,e,a,i)=>{x(t,0+(i?1:0),3),((t,e,a,i)=>{Z(t),i&&(y(t,a),y(t,~a)),t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a})(t,e,a,!0)};var N={_tr_init:t=>{F||((()=>{let t,e,a,h,k;const v=new Array(16);for(a=0,h=0;h<28;h++)for(u[h]=a,t=0;t<1<<r[h];t++)c[a++]=h;for(c[a-1]=h,k=0,h=0;h<16;h++)for(w[h]=k,t=0;t<1<<l[h];t++)f[k++]=h;for(k>>=7;h<n;h++)for(w[h]=k<<7,t=0;t<1<<l[h]-7;t++)f[256+k++]=h;for(e=0;e<=s;e++)v[e]=0;for(t=0;t<=143;)d[2*t+1]=8,t++,v[8]++;for(;t<=255;)d[2*t+1]=9,t++,v[9]++;for(;t<=279;)d[2*t+1]=7,t++,v[7]++;for(;t<=287;)d[2*t+1]=8,t++,v[8]++;for(E(d,287,v),t=0;t<n;t++)_[2*t+1]=5,_[2*t]=A(t,5);g=new b(d,r,257,i,s),p=new b(_,l,0,n,s),m=new b(new Array(0),o,0,19,7)})(),F=!0),t.l_desc=new k(t.dyn_ltree,g),t.d_desc=new k(t.dyn_dtree,p),t.bl_desc=new k(t.bl_tree,m),t.bi_buf=0,t.bi_valid=0,R(t)},_tr_stored_block:L,_tr_flush_block:(t,e,i,n)=>{let s,r,l=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,i=4093624447;for(e=0;e<=31;e++,i>>>=1)if(1&i&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<a;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),T(t,t.l_desc),T(t,t.d_desc),l=(t=>{let e;for(O(t,t.dyn_ltree,t.l_desc.max_code),O(t,t.dyn_dtree,t.d_desc.max_code),T(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*h[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),s=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=s&&(s=r)):s=r=i+5,i+4<=s&&-1!==e?L(t,e,i,n):4===t.strategy||r===s?(x(t,2+(n?1:0),3),D(t,d,_)):(x(t,4+(n?1:0),3),((t,e,a,i)=>{let n;for(x(t,e-257,5),x(t,a-1,5),x(t,i-4,4),n=0;n<i;n++)x(t,t.bl_tree[2*h[n]+1],3);I(t,t.dyn_ltree,e-1),I(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,l+1),D(t,t.dyn_ltree,t.dyn_dtree)),R(t),n&&Z(t)},_tr_tally:(t,e,i)=>(t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&i,t.last_lit++,0===e?t.dyn_ltree[2*i]++:(t.matches++,e--,t.dyn_ltree[2*(c[i]+a+1)]++,t.dyn_dtree[2*v(e)]++),t.last_lit===t.lit_bufsize-1),_tr_align:t=>{x(t,2,3),z(t,256,d),(t=>{16===t.bi_valid?(y(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var B=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const C=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var M=(t,e,a,i)=>{const n=C,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},H={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"},j={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:K,_tr_stored_block:P,_tr_flush_block:Y,_tr_tally:G,_tr_align:X}=N,{Z_NO_FLUSH:W,Z_PARTIAL_FLUSH:q,Z_FULL_FLUSH:J,Z_FINISH:Q,Z_BLOCK:V,Z_OK:$,Z_STREAM_END:tt,Z_STREAM_ERROR:et,Z_DATA_ERROR:at,Z_BUF_ERROR:it,Z_DEFAULT_COMPRESSION:nt,Z_FILTERED:st,Z_HUFFMAN_ONLY:rt,Z_RLE:lt,Z_FIXED:ot,Z_DEFAULT_STRATEGY:ht,Z_UNKNOWN:dt,Z_DEFLATED:_t}=j,ft=258,ct=262,ut=103,wt=113,bt=666,gt=(t,e)=>(t.msg=H[e],e),pt=t=>(t<<1)-(t>4?9:0),mt=t=>{let e=t.length;for(;--e>=0;)t[e]=0};let kt=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const vt=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},yt=(t,e)=>{Y(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,vt(t.strm)},xt=(t,e)=>{t.pending_buf[t.pending++]=e},zt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},At=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=B(t.adler,e,n,a):2===t.state.wrap&&(t.adler=M(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},Et=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,l=t.nice_match;const o=t.strstart>t.w_size-ct?t.strstart-(t.w_size-ct):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+ft;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),l>t.lookahead&&(l=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=ft-(f-s),s=f-ft,i>r){if(t.match_start=e,r=i,i>=l)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>o&&0!=--n);return r<=t.lookahead?r:t.lookahead},Rt=t=>{const e=t.w_size;let a,i,n,s,r;do{if(s=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-ct)){t.window.set(t.window.subarray(e,e+e),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,i=t.hash_size,a=i;do{n=t.head[--a],t.head[a]=n>=e?n-e:0}while(--i);i=e,a=i;do{n=t.prev[--a],t.prev[a]=n>=e?n-e:0}while(--i);s+=e}if(0===t.strm.avail_in)break;if(i=At(t.strm,t.window,t.strstart+t.lookahead,s),t.lookahead+=i,t.lookahead+t.insert>=3)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=kt(t,t.ins_h,t.window[r+1]);t.insert&&(t.ins_h=kt(t,t.ins_h,t.window[r+3-1]),t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<ct&&0!==t.strm.avail_in)},Zt=(t,e)=>{let a,i;for(;;){if(t.lookahead<ct){if(Rt(t),t.lookahead<ct&&e===W)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ct&&(t.match_length=Et(t,a)),t.match_length>=3)if(i=G(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=kt(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=kt(t,t.ins_h,t.window[t.strstart+1]);else i=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(yt(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===Q?(yt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(yt(t,!1),0===t.strm.avail_out)?1:2},Ut=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<ct){if(Rt(t),t.lookahead<ct&&e===W)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ct&&(t.match_length=Et(t,a),t.match_length<=5&&(t.strategy===st||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=G(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=kt(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(yt(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=G(t,0,t.window[t.strstart-1]),i&&yt(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=G(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===Q?(yt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(yt(t,!1),0===t.strm.avail_out)?1:2};function St(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const Dt=[new St(0,0,0,0,((t,e)=>{let a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(Rt(t),0===t.lookahead&&e===W)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;const i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,yt(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-ct&&(yt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Q?(yt(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(yt(t,!1),t.strm.avail_out),1)})),new St(4,4,8,4,Zt),new St(4,5,16,8,Zt),new St(4,6,32,32,Zt),new St(4,4,16,16,Ut),new St(8,16,32,32,Ut),new St(8,16,128,128,Ut),new St(8,32,128,256,Ut),new St(32,128,258,1024,Ut),new St(32,258,258,4096,Ut)];function Tt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_t,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),mt(this.dyn_ltree),mt(this.dyn_dtree),mt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),mt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),mt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Ot=t=>{if(!t||!t.state)return gt(t,et);t.total_in=t.total_out=0,t.data_type=dt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:wt,t.adler=2===e.wrap?0:1,e.last_flush=W,K(e),$},It=t=>{const e=Ot(t);var a;return e===$&&((a=t.state).window_size=2*a.w_size,mt(a.head),a.max_lazy_match=Dt[a.level].max_lazy,a.good_match=Dt[a.level].good_length,a.nice_match=Dt[a.level].nice_length,a.max_chain_length=Dt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ft=(t,e,a,i,n,s)=>{if(!t)return et;let r=1;if(e===nt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==_t||i<8||i>15||e<0||e>9||s<0||s>ot)return gt(t,et);8===i&&(i=9);const l=new Tt;return t.state=l,l.strm=t,l.wrap=r,l.gzhead=null,l.w_bits=i,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=n+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new Uint8Array(2*l.w_size),l.head=new Uint16Array(l.hash_size),l.prev=new Uint16Array(l.w_size),l.lit_bufsize=1<<n+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new Uint8Array(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,It(t)};var Lt={deflateInit:(t,e)=>Ft(t,e,_t,15,8,ht),deflateInit2:Ft,deflateReset:It,deflateResetKeep:Ot,deflateSetHeader:(t,e)=>t&&t.state?2!==t.state.wrap?et:(t.state.gzhead=e,$):et,deflate:(t,e)=>{let a,i;if(!t||!t.state||e>V||e<0)return t?gt(t,et):et;const n=t.state;if(!t.output||!t.input&&0!==t.avail_in||n.status===bt&&e!==Q)return gt(t,0===t.avail_out?it:et);n.strm=t;const s=n.last_flush;if(n.last_flush=e,42===n.status)if(2===n.wrap)t.adler=0,xt(n,31),xt(n,139),xt(n,8),n.gzhead?(xt(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),xt(n,255&n.gzhead.time),xt(n,n.gzhead.time>>8&255),xt(n,n.gzhead.time>>16&255),xt(n,n.gzhead.time>>24&255),xt(n,9===n.level?2:n.strategy>=rt||n.level<2?4:0),xt(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(xt(n,255&n.gzhead.extra.length),xt(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(t.adler=M(t.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(xt(n,0),xt(n,0),xt(n,0),xt(n,0),xt(n,0),xt(n,9===n.level?2:n.strategy>=rt||n.level<2?4:0),xt(n,3),n.status=wt);else{let e=_t+(n.w_bits-8<<4)<<8,a=-1;a=n.strategy>=rt||n.level<2?0:n.level<6?1:6===n.level?2:3,e|=a<<6,0!==n.strstart&&(e|=32),e+=31-e%31,n.status=wt,zt(n,e),0!==n.strstart&&(zt(n,t.adler>>>16),zt(n,65535&t.adler)),t.adler=1}if(69===n.status)if(n.gzhead.extra){for(a=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),vt(t),a=n.pending,n.pending!==n.pending_buf_size));)xt(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){a=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),vt(t),a=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,xt(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),0===i&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){a=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),vt(t),a=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,xt(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>a&&(t.adler=M(t.adler,n.pending_buf,n.pending-a,a)),0===i&&(n.status=ut)}else n.status=ut;if(n.status===ut&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&vt(t),n.pending+2<=n.pending_buf_size&&(xt(n,255&t.adler),xt(n,t.adler>>8&255),t.adler=0,n.status=wt)):n.status=wt),0!==n.pending){if(vt(t),0===t.avail_out)return n.last_flush=-1,$}else if(0===t.avail_in&&pt(e)<=pt(s)&&e!==Q)return gt(t,it);if(n.status===bt&&0!==t.avail_in)return gt(t,it);if(0!==t.avail_in||0!==n.lookahead||e!==W&&n.status!==bt){let a=n.strategy===rt?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(Rt(t),0===t.lookahead)){if(e===W)return 1;break}if(t.match_length=0,a=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(yt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Q?(yt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(yt(t,!1),0===t.strm.avail_out)?1:2})(n,e):n.strategy===lt?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=ft){if(Rt(t),t.lookahead<=ft&&e===W)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+ft;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=ft-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=G(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(yt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Q?(yt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(yt(t,!1),0===t.strm.avail_out)?1:2})(n,e):Dt[n.level].func(n,e);if(3!==a&&4!==a||(n.status=bt),1===a||3===a)return 0===t.avail_out&&(n.last_flush=-1),$;if(2===a&&(e===q?X(n):e!==V&&(P(n,0,0,!1),e===J&&(mt(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),vt(t),0===t.avail_out))return n.last_flush=-1,$}return e!==Q?$:n.wrap<=0?tt:(2===n.wrap?(xt(n,255&t.adler),xt(n,t.adler>>8&255),xt(n,t.adler>>16&255),xt(n,t.adler>>24&255),xt(n,255&t.total_in),xt(n,t.total_in>>8&255),xt(n,t.total_in>>16&255),xt(n,t.total_in>>24&255)):(zt(n,t.adler>>>16),zt(n,65535&t.adler)),vt(t),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?$:tt)},deflateEnd:t=>{if(!t||!t.state)return et;const e=t.state.status;return 42!==e&&69!==e&&73!==e&&91!==e&&e!==ut&&e!==wt&&e!==bt?gt(t,et):(t.state=null,e===wt?gt(t,at):$)},deflateSetDictionary:(t,e)=>{let a=e.length;if(!t||!t.state)return et;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return et;if(1===n&&(t.adler=B(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(mt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,l=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,Rt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=kt(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,Rt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=l,t.avail_in=s,i.wrap=n,$},deflateInfo:\"pako deflate (from Nodeca project)\"};const Nt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Bt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if(\"object\"!=typeof a)throw new TypeError(a+\"must be non-object\");for(const e in a)Nt(a,e)&&(t[e]=a[e])}}return t},Ct=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Mt=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Mt=!1}const Ht=new Uint8Array(256);for(let t=0;t<256;t++)Ht[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Ht[254]=Ht[254]=1;var jt=t=>{if(\"function\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,l=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(l),s=0,n=0;s<l;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},Kt=(t,e)=>{const a=e||t.length;if(\"function\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Ht[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Mt)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a=\"\";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Pt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Ht[t[a]]>e?a:e};var Yt=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0};const Gt=Object.prototype.toString,{Z_NO_FLUSH:Xt,Z_SYNC_FLUSH:Wt,Z_FULL_FLUSH:qt,Z_FINISH:Jt,Z_OK:Qt,Z_STREAM_END:Vt,Z_DEFAULT_COMPRESSION:$t,Z_DEFAULT_STRATEGY:te,Z_DEFLATED:ee}=j;function ae(t){this.options=Bt({level:$t,method:ee,chunkSize:16384,windowBits:15,memLevel:8,strategy:te},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Yt,this.strm.avail_out=0;let a=Lt.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Qt)throw new Error(H[a]);if(e.header&&Lt.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t=\"string\"==typeof e.dictionary?jt(e.dictionary):\"[object ArrayBuffer]\"===Gt.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=Lt.deflateSetDictionary(this.strm,t),a!==Qt)throw new Error(H[a]);this._dict_set=!0}}function ie(t,e){const a=new ae(e);if(a.push(t,!0),a.err)throw a.msg||H[a.err];return a.result}ae.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Jt:Xt,\"string\"==typeof t?a.input=jt(t):\"[object ArrayBuffer]\"===Gt.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===Wt||s===qt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=Lt.deflate(a,s),n===Vt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=Lt.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Qt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},ae.prototype.onData=function(t){this.chunks.push(t)},ae.prototype.onEnd=function(t){t===Qt&&(this.result=Ct(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ne={Deflate:ae,deflate:ie,deflateRaw:function(t,e){return(e=e||{}).raw=!0,ie(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,ie(t,e)},constants:j};var se=function(t,e){let a,i,n,s,r,l,o,h,d,_,f,c,u,w,b,g,p,m,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),l=E.dmax,o=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,b=(1<<E.lenbits)-1,g=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),p=u[f&b];e:for(;;){if(m=p>>>24,f>>>=m,c-=m,m=p>>>16&255,0===m)A[n++]=65535&p;else{if(!(16&m)){if(0==(64&m)){p=u[(65535&p)+(f&(1<<m)-1)];continue e}if(32&m){E.mode=12;break t}t.msg=\"invalid literal/length code\",E.mode=30;break t}k=65535&p,m&=15,m&&(c<m&&(f+=z[a++]<<c,c+=8),k+=f&(1<<m)-1,f>>>=m,c-=m),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),p=w[f&g];a:for(;;){if(m=p>>>24,f>>>=m,c-=m,m=p>>>16&255,!(16&m)){if(0==(64&m)){p=w[(65535&p)+(f&(1<<m)-1)];continue a}t.msg=\"invalid distance code\",E.mode=30;break t}if(v=65535&p,m&=15,c<m&&(f+=z[a++]<<c,c+=8,c<m&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<m)-1,v>l){t.msg=\"invalid distance too far back\",E.mode=30;break t}if(f>>>=m,c-=m,m=n-s,v>m){if(m=v-m,m>h&&E.sane){t.msg=\"invalid distance too far back\",E.mode=30;break t}if(y=0,x=_,0===d){if(y+=o-m,m<k){k-=m;do{A[n++]=_[y++]}while(--m);y=n-v,x=A}}else if(d<m){if(y+=o+d-m,m-=d,m<k){k-=m;do{A[n++]=_[y++]}while(--m);if(y=0,d<k){m=d,k-=m;do{A[n++]=_[y++]}while(--m);y=n-v,x=A}}}else if(y+=d-m,m<k){k-=m;do{A[n++]=_[y++]}while(--m);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const re=15,le=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),oe=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),he=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),de=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var _e=(t,e,a,i,n,s,r,l)=>{const o=l.bits;let h,d,_,f,c,u,w=0,b=0,g=0,p=0,m=0,k=0,v=0,y=0,x=0,z=0,A=null,E=0;const R=new Uint16Array(16),Z=new Uint16Array(16);let U,S,D,T=null,O=0;for(w=0;w<=re;w++)R[w]=0;for(b=0;b<i;b++)R[e[a+b]]++;for(m=o,p=re;p>=1&&0===R[p];p--);if(m>p&&(m=p),0===p)return n[s++]=20971520,n[s++]=20971520,l.bits=1,0;for(g=1;g<p&&0===R[g];g++);for(m<g&&(m=g),y=1,w=1;w<=re;w++)if(y<<=1,y-=R[w],y<0)return-1;if(y>0&&(0===t||1!==p))return-1;for(Z[1]=0,w=1;w<re;w++)Z[w+1]=Z[w]+R[w];for(b=0;b<i;b++)0!==e[a+b]&&(r[Z[e[a+b]]++]=b);if(0===t?(A=T=r,u=19):1===t?(A=le,E-=257,T=oe,O-=257,u=256):(A=he,T=de,u=-1),z=0,b=0,w=g,c=s,k=m,v=0,_=-1,x=1<<m,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){U=w-v,r[b]<u?(S=0,D=r[b]):r[b]>u?(S=T[O+r[b]],D=A[E+r[b]]):(S=96,D=0),h=1<<w-v,d=1<<k,g=d;do{d-=h,n[c+(z>>v)+d]=U<<24|S<<16|D|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,b++,0==--R[w]){if(w===p)break;w=e[a+r[b]]}if(w>m&&(z&f)!==_){for(0===v&&(v=m),c+=g,k=w-v,y=1<<k;k+v<p&&(y-=R[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=m<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),l.bits=m,0};const{Z_FINISH:fe,Z_BLOCK:ce,Z_TREES:ue,Z_OK:we,Z_STREAM_END:be,Z_NEED_DICT:ge,Z_STREAM_ERROR:pe,Z_DATA_ERROR:me,Z_MEM_ERROR:ke,Z_BUF_ERROR:ve,Z_DEFLATED:ye}=j,xe=12,ze=30,Ae=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Ee(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Re=t=>{if(!t||!t.state)return pe;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,we},Ze=t=>{if(!t||!t.state)return pe;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Re(t)},Ue=(t,e)=>{let a;if(!t||!t.state)return pe;const i=t.state;return e<0?(a=0,e=-e):(a=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?pe:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,Ze(t))},Se=(t,e)=>{if(!t)return pe;const a=new Ee;t.state=a,a.window=null;const i=Ue(t,e);return i!==we&&(t.state=null),i};let De,Te,Oe=!0;const Ie=t=>{if(Oe){De=new Int32Array(512),Te=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(_e(1,t.lens,0,288,De,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;_e(2,t.lens,0,32,Te,0,t.work,{bits:5}),Oe=!1}t.lencode=De,t.lenbits=9,t.distcode=Te,t.distbits=5},Fe=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Le={inflateReset:Ze,inflateReset2:Ue,inflateResetKeep:Re,inflateInit:t=>Se(t,15),inflateInit2:Se,inflate:(t,e)=>{let a,i,n,s,r,l,o,h,d,_,f,c,u,w,b,g,p,m,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return pe;a=t.state,a.mode===xe&&(a.mode=13),r=t.next_out,n=t.output,o=t.avail_out,s=t.next_in,i=t.input,l=t.avail_in,h=a.hold,d=a.bits,_=l,f=o,x=we;t:for(;;)switch(a.mode){case 1:if(0===a.wrap){a.mode=13;break}for(;d<16;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=M(a.check,A,2,0),h=0,d=0,a.mode=2;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg=\"incorrect header check\",a.mode=ze;break}if((15&h)!==ye){t.msg=\"unknown compression method\",a.mode=ze;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits)a.wbits=y;else if(y>a.wbits){t.msg=\"invalid window size\",a.mode=ze;break}a.dmax=1<<a.wbits,t.adler=a.check=1,a.mode=512&h?10:xe,h=0,d=0;break;case 2:for(;d<16;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==ye){t.msg=\"unknown compression method\",a.mode=ze;break}if(57344&a.flags){t.msg=\"unknown header flags set\",a.mode=ze;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&(A[0]=255&h,A[1]=h>>>8&255,a.check=M(a.check,A,2,0)),h=0,d=0,a.mode=3;case 3:for(;d<32;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=M(a.check,A,4,0)),h=0,d=0,a.mode=4;case 4:for(;d<16;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&(A[0]=255&h,A[1]=h>>>8&255,a.check=M(a.check,A,2,0)),h=0,d=0,a.mode=5;case 5:if(1024&a.flags){for(;d<16;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&(A[0]=255&h,A[1]=h>>>8&255,a.check=M(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=6;case 6:if(1024&a.flags&&(c=a.length,c>l&&(c=l),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&(a.check=M(a.check,i,c,s)),l-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=7;case 7:if(2048&a.flags){if(0===l)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<l);if(512&a.flags&&(a.check=M(a.check,i,c,s)),l-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=8;case 8:if(4096&a.flags){if(0===l)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<l);if(512&a.flags&&(a.check=M(a.check,i,c,s)),l-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=9;case 9:if(512&a.flags){for(;d<16;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(h!==(65535&a.check)){t.msg=\"header crc mismatch\",a.mode=ze;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=xe;break;case 10:for(;d<32;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}t.adler=a.check=Ae(h),h=0,d=0,a.mode=11;case 11:if(0===a.havedict)return t.next_out=r,t.avail_out=o,t.next_in=s,t.avail_in=l,a.hold=h,a.bits=d,ge;t.adler=a.check=1,a.mode=xe;case xe:if(e===ce||e===ue)break t;case 13:if(a.last){h>>>=7&d,d-=7&d,a.mode=27;break}for(;d<3;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=14;break;case 1:if(Ie(a),a.mode=20,e===ue){h>>>=2,d-=2;break t}break;case 2:a.mode=17;break;case 3:t.msg=\"invalid block type\",a.mode=ze}h>>>=2,d-=2;break;case 14:for(h>>>=7&d,d-=7&d;d<32;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg=\"invalid stored block lengths\",a.mode=ze;break}if(a.length=65535&h,h=0,d=0,a.mode=15,e===ue)break t;case 15:a.mode=16;case 16:if(c=a.length,c){if(c>l&&(c=l),c>o&&(c=o),0===c)break t;n.set(i.subarray(s,s+c),r),l-=c,s+=c,o-=c,r+=c,a.length-=c;break}a.mode=xe;break;case 17:for(;d<14;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg=\"too many length or distance symbols\",a.mode=ze;break}a.have=0,a.mode=18;case 18:for(;a.have<a.ncode;){for(;d<3;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=_e(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid code lengths set\",a.mode=ze;break}a.have=0,a.mode=19;case 19:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],b=z>>>24,g=z>>>16&255,p=65535&z,!(b<=d);){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(p<16)h>>>=b,d-=b,a.lens[a.have++]=p;else{if(16===p){for(R=b+2;d<R;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(h>>>=b,d-=b,0===a.have){t.msg=\"invalid bit length repeat\",a.mode=ze;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===p){for(R=b+3;d<R;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}h>>>=b,d-=b,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=b+7;d<R;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}h>>>=b,d-=b,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg=\"invalid bit length repeat\",a.mode=ze;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===ze)break;if(0===a.lens[256]){t.msg=\"invalid code -- missing end-of-block\",a.mode=ze;break}if(a.lenbits=9,E={bits:a.lenbits},x=_e(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid literal/lengths set\",a.mode=ze;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=_e(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg=\"invalid distances set\",a.mode=ze;break}if(a.mode=20,e===ue)break t;case 20:a.mode=21;case 21:if(l>=6&&o>=258){t.next_out=r,t.avail_out=o,t.next_in=s,t.avail_in=l,a.hold=h,a.bits=d,se(t,f),r=t.next_out,n=t.output,o=t.avail_out,s=t.next_in,i=t.input,l=t.avail_in,h=a.hold,d=a.bits,a.mode===xe&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],b=z>>>24,g=z>>>16&255,p=65535&z,!(b<=d);){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(g&&0==(240&g)){for(m=b,k=g,v=p;z=a.lencode[v+((h&(1<<m+k)-1)>>m)],b=z>>>24,g=z>>>16&255,p=65535&z,!(m+b<=d);){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,a.back+=m}if(h>>>=b,d-=b,a.back+=b,a.length=p,0===g){a.mode=26;break}if(32&g){a.back=-1,a.mode=xe;break}if(64&g){t.msg=\"invalid literal/length code\",a.mode=ze;break}a.extra=15&g,a.mode=22;case 22:if(a.extra){for(R=a.extra;d<R;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=23;case 23:for(;z=a.distcode[h&(1<<a.distbits)-1],b=z>>>24,g=z>>>16&255,p=65535&z,!(b<=d);){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(0==(240&g)){for(m=b,k=g,v=p;z=a.distcode[v+((h&(1<<m+k)-1)>>m)],b=z>>>24,g=z>>>16&255,p=65535&z,!(m+b<=d);){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,a.back+=m}if(h>>>=b,d-=b,a.back+=b,64&g){t.msg=\"invalid distance code\",a.mode=ze;break}a.offset=p,a.extra=15&g,a.mode=24;case 24:if(a.extra){for(R=a.extra;d<R;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg=\"invalid distance too far back\",a.mode=ze;break}a.mode=25;case 25:if(0===o)break t;if(c=f-o,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg=\"invalid distance too far back\",a.mode=ze;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>o&&(c=o),o-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=21);break;case 26:if(0===o)break t;n[r++]=a.length,o--,a.mode=21;break;case 27:if(a.wrap){for(;d<32;){if(0===l)break t;l--,h|=i[s++]<<d,d+=8}if(f-=o,t.total_out+=f,a.total+=f,f&&(t.adler=a.check=a.flags?M(a.check,n,f,r-f):B(a.check,n,f,r-f)),f=o,(a.flags?h:Ae(h))!==a.check){t.msg=\"incorrect data check\",a.mode=ze;break}h=0,d=0}a.mode=28;case 28:if(a.wrap&&a.flags){for(;d<32;){if(0===l)break t;l--,h+=i[s++]<<d,d+=8}if(h!==(4294967295&a.total)){t.msg=\"incorrect length check\",a.mode=ze;break}h=0,d=0}a.mode=29;case 29:x=be;break t;case ze:x=me;break t;case 31:return ke;case 32:default:return pe}return t.next_out=r,t.avail_out=o,t.next_in=s,t.avail_in=l,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<ze&&(a.mode<27||e!==fe))&&Fe(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,a.wrap&&f&&(t.adler=a.check=a.flags?M(a.check,n,f,t.next_out-f):B(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(a.mode===xe?128:0)+(20===a.mode||15===a.mode?256:0),(0===_&&0===f||e===fe)&&x===we&&(x=ve),x},inflateEnd:t=>{if(!t||!t.state)return pe;let e=t.state;return e.window&&(e.window=null),t.state=null,we},inflateGetHeader:(t,e)=>{if(!t||!t.state)return pe;const a=t.state;return 0==(2&a.wrap)?pe:(a.head=e,e.done=!1,we)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return t&&t.state?(i=t.state,0!==i.wrap&&11!==i.mode?pe:11===i.mode&&(n=1,n=B(n,e,a,0),n!==i.check)?me:(s=Fe(t,e,a,a),s?(i.mode=31,ke):(i.havedict=1,we))):pe},inflateInfo:\"pako inflate (from Nodeca project)\"};var Ne=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1};const Be=Object.prototype.toString,{Z_NO_FLUSH:Ce,Z_FINISH:Me,Z_OK:He,Z_STREAM_END:je,Z_NEED_DICT:Ke,Z_STREAM_ERROR:Pe,Z_DATA_ERROR:Ye,Z_MEM_ERROR:Ge}=j;function Xe(t){this.options=Bt({chunkSize:65536,windowBits:15,to:\"\"},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Yt,this.strm.avail_out=0;let a=Le.inflateInit2(this.strm,e.windowBits);if(a!==He)throw new Error(H[a]);if(this.header=new Ne,Le.inflateGetHeader(this.strm,this.header),e.dictionary&&(\"string\"==typeof e.dictionary?e.dictionary=jt(e.dictionary):\"[object ArrayBuffer]\"===Be.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Le.inflateSetDictionary(this.strm,e.dictionary),a!==He)))throw new Error(H[a])}function We(t,e){const a=new Xe(e);if(a.push(t),a.err)throw a.msg||H[a.err];return a.result}Xe.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,l;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Me:Ce,\"[object ArrayBuffer]\"===Be.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Le.inflate(a,r),s===Ke&&n&&(s=Le.inflateSetDictionary(a,n),s===He?s=Le.inflate(a,r):s===Ye&&(s=Ke));a.avail_in>0&&s===je&&a.state.wrap>0&&0!==t[a.next_in];)Le.inflateReset(a),s=Le.inflate(a,r);switch(s){case Pe:case Ye:case Ke:case Ge:return this.onEnd(s),this.ended=!0,!1}if(l=a.avail_out,a.next_out&&(0===a.avail_out||s===je))if(\"string\"===this.options.to){let t=Pt(a.output,a.next_out),e=a.next_out-t,n=Kt(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==He||0!==l){if(s===je)return s=Le.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},Xe.prototype.onData=function(t){this.chunks.push(t)},Xe.prototype.onEnd=function(t){t===He&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=Ct(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var qe={Inflate:Xe,inflate:We,inflateRaw:function(t,e){return(e=e||{}).raw=!0,We(t,e)},ungzip:We,constants:j};const{Deflate:Je,deflate:Qe,deflateRaw:Ve,gzip:$e}=ne,{Inflate:ta,inflate:ea,inflateRaw:aa,ungzip:ia}=qe;var na=Je,sa=Qe,ra=Ve,la=$e,oa=ta,ha=ea,da=aa,_a=ia,fa=j,ca={Deflate:na,deflate:sa,deflateRaw:ra,gzip:la,Inflate:oa,inflate:ha,inflateRaw:da,ungzip:_a,constants:fa};t.Deflate=na,t.Inflate=oa,t.constants=fa,t.default=ca,t.deflate=sa,t.deflateRaw=ra,t.gzip=la,t.inflate=ha,t.inflateRaw=da,t.ungzip=_a,Object.defineProperty(t,\"__esModule\",{value:!0})}));",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Decompress a string.",
          "fullName": "Decompress String",
          "functionType": "StringExpression",
          "name": "Decompress",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "eventsFunctionContext.returnValue = pako.inflate(gdjs._pakoTools.binstring2buf(eventsFunctionContext.getArgument(\"comp\")), { to: \"string\" });\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "String to decompress",
              "longDescription": "",
              "name": "comp",
              "optional": false,
              "supplementaryInformation": "",
              "type": "string"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Compress a string.",
          "fullName": "Compress String",
          "functionType": "StringExpression",
          "name": "Compress",
          "private": false,
          "sentence": "",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::JsCode",
              "inlineCode": "eventsFunctionContext.returnValue = gdjs._pakoTools.buf2binstring(pako.deflate(eventsFunctionContext.getArgument(\"comp\")));\r\n",
              "parameterObjects": "",
              "useStrict": true,
              "eventsSheetExpanded": false
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "String to compress",
              "longDescription": "",
              "name": "comp",
              "optional": false,
              "supplementaryInformation": "",
              "type": "string"
            }
          ],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "westboy, daliyoucefmedakram@gmail.com, @bouh",
      "description": "Animate the text to simulate it being written character by character (also called \"typewriter\" effect), with a customizable time between each character. Useful for dialogue scenes or visual novels.\n\nAdd the behavior to a Text object (BBText, Bitmap Text object) and choose the interval between characters.\n\n* When the text changes, the automatic typing starts again from the beginning with the new text.\n* You can change the speed of the text typing by changing the interval with events.\n* Use a condition to check if the typing finished.\n* You can also pause the typing and resume it after.",
      "extensionNamespace": "",
      "fullName": "Auto typing animation for texts (\"typewriter\" effect)",
      "helpPath": "",
      "iconUrl": "",
      "name": "AutoTyping",
      "previewIconUrl": "",
      "shortDescription": "Animate the text to simulate it being written character by character (also called \"typewriter\" effect), with a customizable time between each character. Useful for dialogue scenes or visual novels.",
      "version": "1.0.2",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [],
      "eventsBasedBehaviors": [
        {
          "description": "Animate the text to simulate it being written character by character (also called \"typewriter\" effect), with a customizable time between each character. Add the behavior to the object, and it will get animated when the text is changed. You can also pause/resume it.",
          "fullName": "Auto typing text",
          "name": "Text_AutoTyping",
          "objectType": "TextObject::Text",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPostEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjetTxt"
                      },
                      "parameters": [
                        "Object",
                        "_txt_buffer",
                        "=",
                        "Object.String()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "TextObject::String"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "\"\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ResetObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "<",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "TextObject::String"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "SubStr(Object.VariableString(_txt_buffer), 0, 1 + Object.Variable(_write_index))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\"",
                            "Object.Behavior::PropertyInterval()"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "+",
                            "1"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "RemoveTimer"
                      },
                      "parameters": [
                        "",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "TextObject::String"
                          },
                          "parameters": [
                            "Object",
                            "!=",
                            "Object.VariableString(_txt_buffer)"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjetTxt"
                          },
                          "parameters": [
                            "Object",
                            "_txt_buffer",
                            "=",
                            "Object.String()"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "TextObject::String"
                          },
                          "parameters": [
                            "Object",
                            "=",
                            "\"\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Execute actions when the auto typing text ends.",
              "fullName": "Auto typing finished",
              "functionType": "Condition",
              "name": "TypingFinished",
              "private": false,
              "sentence": "When _PARAM0_ finished auto typing",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Pause animation auto typing.",
              "fullName": "Pause auto typing",
              "functionType": "Action",
              "name": "Pause",
              "private": false,
              "sentence": "Pause auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "PauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Resume auto typing after pause.",
              "fullName": "Resume after pause",
              "functionType": "Action",
              "name": "Resume",
              "private": false,
              "sentence": "Resume auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "UnPauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Detect if the auto typing is on pause.",
              "fullName": "Typing on pause",
              "functionType": "Condition",
              "name": "TypingPause",
              "private": false,
              "sentence": "_PARAM0_ is on pause",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ObjectTimerPaused"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Change the time between characters being typed. ",
              "fullName": "Change the interval time",
              "functionType": "Action",
              "name": "ChangeInterval",
              "private": false,
              "sentence": "Set the interval between characters of _PARAM0_ to _PARAM2_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "AutoTyping::Text_AutoTyping::SetPropertyInterval"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "GetArgumentAsNumber(\"interval\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "TextObject::Text",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::Text_AutoTyping",
                  "type": "behavior"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Interval tme",
                  "longDescription": "",
                  "name": "interval",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "expression"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "0.05",
              "type": "Number",
              "label": "Interval between characters in seconds.",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "Interval"
            }
          ]
        },
        {
          "description": "Animate the text to simulate it being written character by character (also called \"typewriter\" effect), with a customizable time between each character. Add the behavior to the object, and it will get animated when the text is changed. You can also pause/resume it.",
          "fullName": "Auto typing text",
          "name": "BitmapText_AutoTyping",
          "objectType": "BitmapText::BitmapTextObject",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPostEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjetTxt"
                      },
                      "parameters": [
                        "Object",
                        "_txt_buffer",
                        "=",
                        "Object.Text()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "BitmapText::BitmapTextObject::SetText"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "\"\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ResetObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "<",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BitmapText::BitmapTextObject::SetText"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "SubStr(Object.VariableString(_txt_buffer), 0, Object.Variable(_write_index) + 1)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\"",
                            "Object.Behavior::PropertyInterval()"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "+",
                            "1"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "RemoveObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "BitmapText::BitmapTextObject::Text"
                          },
                          "parameters": [
                            "Object",
                            "!=",
                            "Object.VariableString(_txt_buffer)"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjetTxt"
                          },
                          "parameters": [
                            "Object",
                            "_txt_buffer",
                            "=",
                            "Object.Text()"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "BitmapText::BitmapTextObject::SetText"
                          },
                          "parameters": [
                            "Object",
                            "=",
                            "\"\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Execute actions when the auto typing text ends.",
              "fullName": "Auto typing finished",
              "functionType": "Condition",
              "name": "TypingFinished",
              "private": false,
              "sentence": "When _PARAM0_ finished auto typing",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Pause animation auto typing.",
              "fullName": "Pause auto typing",
              "functionType": "Action",
              "name": "Pause",
              "private": false,
              "sentence": "Pause auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "PauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Resume auto typing after pause.",
              "fullName": "Resume after pause",
              "functionType": "Action",
              "name": "Resume",
              "private": false,
              "sentence": "Resume auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "UnPauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Detect if the auto typing is on pause.",
              "fullName": "Typing on pause",
              "functionType": "Condition",
              "name": "TypingPause",
              "private": false,
              "sentence": "_PARAM0_ is on pause",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ObjectTimerPaused"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Change the time between characters being typed. ",
              "fullName": "Change the interval time",
              "functionType": "Action",
              "name": "ChangeInterval",
              "private": false,
              "sentence": "Set the interval between characters of _PARAM0_ to _PARAM2_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "AutoTyping::BitmapText_AutoTyping::SetPropertyInterval"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "GetArgumentAsNumber(\"interval\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BitmapText::BitmapTextObject",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BitmapText_AutoTyping",
                  "type": "behavior"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Interval tme",
                  "longDescription": "",
                  "name": "interval",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "expression"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "0.05",
              "type": "Number",
              "label": "Interval between characters in seconds.",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "Interval"
            }
          ]
        },
        {
          "description": "Animate the text to simulate it being written character by character (also called \"typewriter\" effect), with a customizable time between each character. Add the behavior to the object, and it will get animated when the text is changed. You can also pause/resume it.",
          "fullName": "Auto typing text",
          "name": "BBText_AutoTyping",
          "objectType": "BBText::BBText",
          "eventsFunctions": [
            {
              "description": "",
              "fullName": "",
              "functionType": "Action",
              "name": "doStepPostEvents",
              "private": false,
              "sentence": "",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarObjetTxt"
                      },
                      "parameters": [
                        "Object",
                        "_txt_buffer",
                        "=",
                        "Object.GetBBText()"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "BBText::SetBBText"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "\"\""
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ResetObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        "<",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BBText::SetBBText"
                      },
                      "parameters": [
                        "Object",
                        "=",
                        "SubStr(Object.VariableString(_txt_buffer), 0, Object.Variable(_write_index) + 1)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\"",
                            "Object.Behavior::PropertyInterval()"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "+",
                            "1"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "RemoveObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "BBText::IsBBText"
                          },
                          "parameters": [
                            "Object",
                            "!=",
                            "Object.VariableString(_txt_buffer)"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjet"
                          },
                          "parameters": [
                            "Object",
                            "_write_index",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarObjetTxt"
                          },
                          "parameters": [
                            "Object",
                            "_txt_buffer",
                            "=",
                            "Object.GetBBText()"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "BBText::SetBBText"
                          },
                          "parameters": [
                            "Object",
                            "=",
                            "\"\""
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ResetObjectTimer"
                          },
                          "parameters": [
                            "Object",
                            "\"Autotyping Write Timer\""
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ]
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Execute actions when the auto typing text ends.",
              "fullName": "Auto typing finished",
              "functionType": "Condition",
              "name": "TypingFinished",
              "private": false,
              "sentence": "When _PARAM0_ finished auto typing",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarObjet"
                      },
                      "parameters": [
                        "Object",
                        "_write_index",
                        ">=",
                        "StrLength(Object.VariableString(_txt_buffer))"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Pause animation auto typing.",
              "fullName": "Pause auto typing",
              "functionType": "Action",
              "name": "Pause",
              "private": false,
              "sentence": "Pause auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "PauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Resume auto typing after pause.",
              "fullName": "Resume after pause",
              "functionType": "Action",
              "name": "Resume",
              "private": false,
              "sentence": "Resume auto typing of _PARAM0_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "UnPauseObjectTimer"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Detect if the auto typing is on pause.",
              "fullName": "Typing on pause",
              "functionType": "Condition",
              "name": "TypingPause",
              "private": false,
              "sentence": "_PARAM0_ is on pause",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ObjectTimerPaused"
                      },
                      "parameters": [
                        "Object",
                        "\"Autotyping Write Timer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetReturnBoolean"
                      },
                      "parameters": [
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                }
              ],
              "objectGroups": []
            },
            {
              "description": "Change the time between characters being typed. ",
              "fullName": "Change the interval time",
              "functionType": "Action",
              "name": "ChangeInterval",
              "private": false,
              "sentence": "Set the interval between characters of _PARAM0_ to _PARAM2_",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "BuiltinCommonInstructions::Once"
                      },
                      "parameters": [],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "AutoTyping::BBText_AutoTyping::SetPropertyInterval"
                      },
                      "parameters": [
                        "Object",
                        "Behavior",
                        "=",
                        "GetArgumentAsNumber(\"interval\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": [
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Object",
                  "longDescription": "",
                  "name": "Object",
                  "optional": false,
                  "supplementaryInformation": "BBText::BBText",
                  "type": "object"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Behavior",
                  "longDescription": "",
                  "name": "Behavior",
                  "optional": false,
                  "supplementaryInformation": "AutoTyping::BBText_AutoTyping",
                  "type": "behavior"
                },
                {
                  "codeOnly": false,
                  "defaultValue": "",
                  "description": "Interval tme",
                  "longDescription": "",
                  "name": "interval",
                  "optional": false,
                  "supplementaryInformation": "",
                  "type": "expression"
                }
              ],
              "objectGroups": []
            }
          ],
          "propertyDescriptors": [
            {
              "value": "0.05",
              "type": "Number",
              "label": "Interval between characters in seconds.",
              "description": "",
              "extraInformation": [],
              "hidden": false,
              "name": "Interval"
            }
          ]
        }
      ]
    },
    {
      "author": "westboy31, Tristan Rhodes (https://victrisgames.itch.io/)",
      "description": "Ideal for explosions, hit/impacts, earthquake, etc.\n\nSelect one or more methods of shaking:\n- Position:  Shake the X and/or Y position of the camera \n- Angle: Shake the rotation of the camera \n- Zoom: Shake the zoom level of the camera \n\nControl how the camera shakes:\n- Amplitude: How far the camera moves during each shake\n- Duration: Amount of time to shake the camera\n- Time between shakes: Amount of time between each change of the movement of the camera\n- Keep shaking until stopped (boolean)\n\nTips:\n- For a single-shake effect, set the \"Time between shakes\" to be equal to \"Duration\"  (great for a hit or impact)\n- To make the single-shake move in the opposite direction, use negative numbers \n- To repeat a single-shake effect in a loop, add a condition \"Camera is not shaking\" \n- Use a long \"Time between shakes\" to simulate a slow moving object (like a ship rocking back and forth)\n- Make sure to \"Stop shaking\" before starting a new shake if it uses different parameters. \n- Use \"Shake until stopped\" to simulate engine vibration, earthquake, or pulsing\n",
      "extensionNamespace": "",
      "fullName": "Camera Shake",
      "helpPath": "",
      "iconUrl": "",
      "name": "CameraShake",
      "previewIconUrl": "",
      "shortDescription": "Shake the camera on the specified layer using one or more methods of shaking (position, angle, zoom).",
      "version": "2.6.5",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Shake the camera on the specified layer, using one or more ways to shake (position, angle, zoom).",
          "fullName": "Camera Shake",
          "functionType": "Action",
          "name": "CameraShake",
          "private": false,
          "sentence": "Shake camera on _PARAM3_ layer for _PARAM5_ seconds. Use an amplitude of _PARAM1_px on X axis and _PARAM2_px on Y axis, angle rotation amplitude _PARAM6_ degrees, and zoom amplitude _PARAM7_ percent.  Wait _PARAM8_ seconds between shakes. Keep shaking until stopped: _PARAM9_",
          "events": [
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Camera Shake",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Start/Reset duration timer",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ResetTimer"
                      },
                      "parameters": [
                        "",
                        "\"__CameraShake_DurationTimer\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Pass input parameters to global variables so that onScenePostEvents can use them",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_PowerX",
                        "=",
                        "GetArgumentAsNumber(\"PowerX\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_PowerY",
                        "=",
                        "GetArgumentAsNumber(\"PowerY\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobalTxt"
                      },
                      "parameters": [
                        "__CameraShake_Layer",
                        "=",
                        "GetArgumentAsString(\"Layer\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Camera",
                        "=",
                        "GetArgumentAsNumber(\"Camera\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Duration",
                        "=",
                        "GetArgumentAsNumber(\"Duration\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_PowerAngle",
                        "=",
                        "GetArgumentAsNumber(\"PowerAngle\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_PowerZoom",
                        "=",
                        "GetArgumentAsNumber(\"PowerZoom\")"
                      ],
                      "subInstructions": []
                    },
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_TimeBetweenShakes",
                        "=",
                        "GetArgumentAsNumber(\"TimeBetweenShakes\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Determine if the shake should keep going until stopped",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetGlobalVariableAsBoolean"
                      },
                      "parameters": [
                        "__CameraShake_ShakeForever",
                        "False"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "GetArgumentAsBoolean"
                      },
                      "parameters": [
                        "\"ShakeForever\""
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "SetGlobalVariableAsBoolean"
                      },
                      "parameters": [
                        "__CameraShake_ShakeForever",
                        "True"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Add default values if none were provided",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Duration",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Duration",
                        "=",
                        "0.5"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_TimeBetweenShakes",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_TimeBetweenShakes",
                        "=",
                        "0.08"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "If duration is less than a single shake, increase duration to make 1 full shake",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Duration",
                        "<",
                        "GlobalVariable(__CameraShake_TimeBetweenShakes)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_Duration",
                        "=",
                        "GlobalVariable(__CameraShake_TimeBetweenShakes)"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Detect initial shake",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_ShakeInProgress",
                        "=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_InitialShake",
                        "=",
                        "1"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Initiate the onScenePostEvents function",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarGlobal"
                      },
                      "parameters": [
                        "__CameraShake_ShakeInProgress",
                        "=",
                        "1"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Amplitude of shaking on the X axis (pixels) (For example: 5)",
              "longDescription": "",
              "name": "PowerX",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Amplitude of shaking on the Y axis (pixels) (For example: 5)",
              "longDescription": "",
              "name": "PowerY",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Layer (base layer if empty)",
              "longDescription": "",
              "name": "Layer",
              "optional": false,
              "supplementaryInformation": "",
              "type": "layer"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Camera index (Default: 0)",
              "longDescription": "",
              "name": "Camera",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Duration (seconds) (Default: 0.5)",
              "longDescription": "",
              "name": "Duration",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Angle rotation amplitude (degrees) (For example: 2)",
              "longDescription": "",
              "name": "PowerAngle",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Zoom amplitude (percent change) (For example: 3)",
              "longDescription": "",
              "name": "PowerZoom",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Amount of time between shakes (seconds) (Default: 0.08)",
              "longDescription": "",
              "name": "TimeBetweenShakes",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Keep shaking until stopped",
              "longDescription": "Duration value will be ignored",
              "name": "ShakeForever",
              "optional": false,
              "supplementaryInformation": "",
              "type": "yesorno"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "",
          "fullName": "",
          "functionType": "Action",
          "name": "onScenePostEvents",
          "private": false,
          "sentence": "",
          "events": [
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Camera Shake",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Start shaking",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarGlobal"
                          },
                          "parameters": [
                            "__CameraShake_ShakeInProgress",
                            "=",
                            "1"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Keep shaking forever (if desired)",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "GlobalVariableAsBoolean"
                              },
                              "parameters": [
                                "__CameraShake_ShakeForever",
                                "True"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarGlobal"
                              },
                              "parameters": [
                                "__CameraShake_Duration",
                                "=",
                                "100"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ResetTimer"
                              },
                              "parameters": [
                                "",
                                "\"__CameraShake_DurationTimer\""
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "colorB": 228,
                          "colorG": 176,
                          "colorR": 74,
                          "creationTime": 0,
                          "disabled": false,
                          "folded": false,
                          "name": "Calculate movement of the shake",
                          "source": "",
                          "type": "BuiltinCommonInstructions::Group",
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Run once before every shake movement",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "BuiltinCommonInstructions::Or"
                                  },
                                  "parameters": [],
                                  "subInstructions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_InitialShake",
                                        "=",
                                        "1"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "Timer"
                                      },
                                      "parameters": [
                                        "",
                                        "GlobalVariable(__CameraShake_TimeBetweenShakes)",
                                        "\"__CameraShake_ShakeTimer\""
                                      ],
                                      "subInstructions": []
                                    }
                                  ]
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ResetTimer"
                                  },
                                  "parameters": [
                                    "",
                                    "\"__CameraShake_ShakeTimer\""
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_ShakeCounter",
                                    "+",
                                    "1"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": [
                                {
                                  "colorB": 228,
                                  "colorG": 176,
                                  "colorR": 74,
                                  "creationTime": 0,
                                  "disabled": false,
                                  "folded": true,
                                  "name": "Correct for drift and reset drift tracking variables",
                                  "source": "",
                                  "type": "BuiltinCommonInstructions::Group",
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Move to correct any drift from previous shake",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerAngle",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "RotateCamera"
                                          },
                                          "parameters": [
                                            "",
                                            "-",
                                            "GlobalVariable(__CameraShake_AngleTravelled)",
                                            "GlobalVariableString(__CameraShake_Layer)",
                                            "GlobalVariable(__CameraShake_Camera)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerZoom",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ZoomCamera"
                                          },
                                          "parameters": [
                                            "",
                                            "CameraZoom(GlobalVariableString(__CameraShake_Layer),GlobalVariable(__CameraShake_Camera)) - GlobalVariable(__CameraShake_ZoomTravelled)",
                                            "GlobalVariableString(__CameraShake_Layer)",
                                            "GlobalVariable(__CameraShake_Camera)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "BuiltinCommonInstructions::Or"
                                          },
                                          "parameters": [],
                                          "subInstructions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerX",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            },
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerY",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            }
                                          ]
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "SetCameraX"
                                          },
                                          "parameters": [
                                            "Object",
                                            "-",
                                            "GlobalVariable(__CameraShake_DisplacementTravelledX)",
                                            "GlobalVariableString(__CameraShake_Layer)",
                                            "GlobalVariable(__CameraShake_Camera)"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "SetCameraY"
                                          },
                                          "parameters": [
                                            "Object",
                                            "-",
                                            "GlobalVariable(__CameraShake_DisplacementTravelledY)",
                                            "GlobalVariableString(__CameraShake_Layer)",
                                            "GlobalVariable(__CameraShake_Camera)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Reset drift detection variables",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledX",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledY",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_AngleTravelled",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_ZoomTravelled",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ],
                                  "parameters": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Calculate Position Shake",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "BuiltinCommonInstructions::Or"
                                      },
                                      "parameters": [],
                                      "subInstructions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerX",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerY",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ]
                                    }
                                  ],
                                  "actions": [],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "PositionDisplacement = (DesiredDuration - RunningTimer) / DesiredDuration * Amplitude * [-1 or 1]",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Make initial shake NOT random so users can set a direction for a one-shake effect",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_InitialShake",
                                            "=",
                                            "1"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [],
                                      "events": [
                                        {
                                          "disabled": false,
                                          "folded": false,
                                          "type": "BuiltinCommonInstructions::Standard",
                                          "conditions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerX",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "actions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "ModVarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_DisplacementX",
                                                "=",
                                                "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerX)"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "events": []
                                        },
                                        {
                                          "disabled": false,
                                          "folded": false,
                                          "type": "BuiltinCommonInstructions::Standard",
                                          "conditions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerY",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "actions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "ModVarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_DisplacementY",
                                                "=",
                                                "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerY)"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "events": []
                                        }
                                      ]
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "After initial shake pick a random direction",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_InitialShake",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [],
                                      "events": [
                                        {
                                          "disabled": false,
                                          "folded": false,
                                          "type": "BuiltinCommonInstructions::Standard",
                                          "conditions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerX",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "actions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "ModVarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_DisplacementX",
                                                "=",
                                                "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerX) * RandomWithStep(-1, 1, 2)"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "events": []
                                        },
                                        {
                                          "disabled": false,
                                          "folded": false,
                                          "type": "BuiltinCommonInstructions::Standard",
                                          "conditions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "VarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_PowerY",
                                                "!=",
                                                "0"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "actions": [
                                            {
                                              "type": {
                                                "inverted": false,
                                                "value": "ModVarGlobal"
                                              },
                                              "parameters": [
                                                "__CameraShake_DisplacementY",
                                                "=",
                                                "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerY) * RandomWithStep(-1, 1, 2)"
                                              ],
                                              "subInstructions": []
                                            }
                                          ],
                                          "events": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Calculate Rotation (angle) shake ",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_PowerAngle",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Every \"even\" shake, rotate counter-clockwise",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "DisplacementAngle = ((DesiredDuration - RunningTimer) / DesiredDuration) * Amplitude",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "Egal"
                                          },
                                          "parameters": [
                                            "mod(GlobalVariable(__CameraShake_ShakeCounter),2)",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementAngle",
                                            "=",
                                            "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) *  GlobalVariable(__CameraShake_PowerAngle)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Every \"odd\" shake, rotate clockwise (this includes the initial shake and can be used for a one shake effect)",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "DisplacementAngle = -1 * ((DesiredDuration - RunningTimer) / DesiredDuration) * Amplitude",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "Egal"
                                          },
                                          "parameters": [
                                            "mod(GlobalVariable(__CameraShake_ShakeCounter),2)",
                                            "=",
                                            "1"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementAngle",
                                            "=",
                                            "-1 * (GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) *  GlobalVariable(__CameraShake_PowerAngle)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Calculate Zoom shake",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_PowerZoom",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Calculate camera zoom displacement, with linear decay over time",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "ZoomDisplacement = ((DesiredDuration - RunningTimer) / DesiredDuration) * Amplitude *  1/100",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Every even shake, increase zoom",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "Egal"
                                          },
                                          "parameters": [
                                            "mod(GlobalVariable(__CameraShake_ShakeCounter),2)",
                                            "=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementZoom",
                                            "=",
                                            "-1 * (GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerZoom) * (1/100)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Every \"odd\" shake, decrease scale",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "ZoomDisplacement = -1 * ((DesiredDuration - RunningTimer) / DesiredDuration) * Amplitude *  1/100",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "Egal"
                                          },
                                          "parameters": [
                                            "mod(GlobalVariable(__CameraShake_ShakeCounter),2)",
                                            "=",
                                            "1"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementZoom",
                                            "=",
                                            "(GlobalVariable(__CameraShake_Duration) - TimerElapsedTime(\"__CameraShake_DurationTimer\")) / GlobalVariable(__CameraShake_Duration) * GlobalVariable(__CameraShake_PowerZoom) * (1/100)"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Save that initial shake has been processed",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ModVarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_InitialShake",
                                        "=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ]
                            }
                          ],
                          "parameters": []
                        },
                        {
                          "colorB": 228,
                          "colorG": 176,
                          "colorR": 74,
                          "creationTime": 0,
                          "disabled": false,
                          "folded": false,
                          "name": "Move camera",
                          "source": "",
                          "type": "BuiltinCommonInstructions::Group",
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Calculate the fraction of shake that occured during this frame",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarScene"
                                  },
                                  "parameters": [
                                    "__CameraShake_PercentTimeElapsedThisFrame",
                                    "=",
                                    "min(1,TimeDelta()/GlobalVariable(__CameraShake_TimeBetweenShakes))"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Increase change for the first half of the shake (move away from original values)",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": true,
                                    "value": "Timer"
                                  },
                                  "parameters": [
                                    "",
                                    "GlobalVariable(__CameraShake_TimeBetweenShakes)/2",
                                    "\"__CameraShake_ShakeTimer\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [],
                              "events": [
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change position",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "BuiltinCommonInstructions::Or"
                                      },
                                      "parameters": [],
                                      "subInstructions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerX",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerY",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ]
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "CameraX"
                                      },
                                      "parameters": [
                                        "",
                                        "-",
                                        "round(1024 * GlobalVariable(__CameraShake_DisplacementX) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "CameraY"
                                      },
                                      "parameters": [
                                        "",
                                        "-",
                                        "round(1024 * GlobalVariable(__CameraShake_DisplacementY) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save movement to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledX",
                                            "-",
                                            "round(1024 * GlobalVariable(__CameraShake_DisplacementX) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledY",
                                            "-",
                                            "round(1024 * GlobalVariable(__CameraShake_DisplacementY) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change angle",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "Egal"
                                      },
                                      "parameters": [
                                        "GlobalVariable(__CameraShake_PowerAngle)",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "RotateCamera"
                                      },
                                      "parameters": [
                                        "",
                                        "+",
                                        "round(1024 * (GlobalVariable(__CameraShake_DisplacementAngle) * Variable(__CameraShake_PercentTimeElapsedThisFrame))) / 1024",
                                        "",
                                        ""
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save movement to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_AngleTravelled",
                                            "+",
                                            "round(1024 * (GlobalVariable(__CameraShake_DisplacementAngle) * Variable(__CameraShake_PercentTimeElapsedThisFrame))) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change zoom",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "Egal"
                                      },
                                      "parameters": [
                                        "GlobalVariable(__CameraShake_PowerZoom)",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ZoomCamera"
                                      },
                                      "parameters": [
                                        "",
                                        "CameraZoom(GlobalVariableString(__CameraShake_Layer),GlobalVariable(__CameraShake_Camera)) + round(1024 * GlobalVariable(__CameraShake_DisplacementZoom) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save movement to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_ZoomTravelled",
                                            "+",
                                            "round(1024 * GlobalVariable(__CameraShake_DisplacementZoom) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Decrease change the second half of the shake (return to original position)",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "Timer"
                                  },
                                  "parameters": [
                                    "",
                                    "GlobalVariable(__CameraShake_TimeBetweenShakes)/2",
                                    "\"__CameraShake_ShakeTimer\""
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [],
                              "events": [
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change position",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "BuiltinCommonInstructions::Or"
                                      },
                                      "parameters": [],
                                      "subInstructions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerX",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "VarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_PowerY",
                                            "!=",
                                            "0"
                                          ],
                                          "subInstructions": []
                                        }
                                      ]
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "CameraX"
                                      },
                                      "parameters": [
                                        "",
                                        "+",
                                        "round(1024 * GlobalVariable(__CameraShake_DisplacementX) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "CameraY"
                                      },
                                      "parameters": [
                                        "",
                                        "+",
                                        "round(1024 * GlobalVariable(__CameraShake_DisplacementY) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save the amount of change to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledX",
                                            "+",
                                            "round(1024 * GlobalVariable(__CameraShake_DisplacementX) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        },
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_DisplacementTravelledY",
                                            "+",
                                            "round(1024 * GlobalVariable(__CameraShake_DisplacementY) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change angle",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "Egal"
                                      },
                                      "parameters": [
                                        "GlobalVariable(__CameraShake_PowerAngle)",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "RotateCamera"
                                      },
                                      "parameters": [
                                        "",
                                        "-",
                                        "round(1024 * (GlobalVariable(__CameraShake_DisplacementAngle) * Variable(__CameraShake_PercentTimeElapsedThisFrame))) / 1024",
                                        "",
                                        ""
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save the amount of change to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_AngleTravelled",
                                            "-",
                                            "round(1024 * (GlobalVariable(__CameraShake_DisplacementAngle) * Variable(__CameraShake_PercentTimeElapsedThisFrame))) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change zoom",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "Egal"
                                      },
                                      "parameters": [
                                        "GlobalVariable(__CameraShake_PowerZoom)",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ZoomCamera"
                                      },
                                      "parameters": [
                                        "",
                                        "CameraZoom(GlobalVariableString(__CameraShake_Layer),GlobalVariable(__CameraShake_Camera)) - round(1024 *  GlobalVariable(__CameraShake_DisplacementZoom) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024",
                                        "GlobalVariableString(__CameraShake_Layer)",
                                        "GlobalVariable(__CameraShake_Camera)"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": [
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Comment",
                                      "color": {
                                        "b": 109,
                                        "g": 230,
                                        "r": 255,
                                        "textB": 0,
                                        "textG": 0,
                                        "textR": 0
                                      },
                                      "comment": "Save the amount of change to calculate drift",
                                      "comment2": ""
                                    },
                                    {
                                      "disabled": false,
                                      "folded": false,
                                      "type": "BuiltinCommonInstructions::Standard",
                                      "conditions": [],
                                      "actions": [
                                        {
                                          "type": {
                                            "inverted": false,
                                            "value": "ModVarGlobal"
                                          },
                                          "parameters": [
                                            "__CameraShake_ZoomTravelled",
                                            "-",
                                            "round(1024 *  GlobalVariable(__CameraShake_DisplacementZoom) * Variable(__CameraShake_PercentTimeElapsedThisFrame)) / 1024"
                                          ],
                                          "subInstructions": []
                                        }
                                      ],
                                      "events": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ],
                          "parameters": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Stop shaking",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Stop shaking when the duration has been reached or if stop shaking has been requested",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "BuiltinCommonInstructions::Or"
                          },
                          "parameters": [],
                          "subInstructions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "Timer"
                              },
                              "parameters": [
                                "",
                                "GlobalVariable(__CameraShake_Duration)",
                                "\"__CameraShake_DurationTimer\""
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarGlobal"
                              },
                              "parameters": [
                                "__CameraShake_ShakeInProgress",
                                "=",
                                "-1"
                              ],
                              "subInstructions": []
                            }
                          ]
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "BuiltinCommonInstructions::Once"
                          },
                          "parameters": [],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarGlobal"
                          },
                          "parameters": [
                            "__CameraShake_ShakeInProgress",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": [
                        {
                          "colorB": 228,
                          "colorG": 176,
                          "colorR": 74,
                          "creationTime": 0,
                          "disabled": false,
                          "folded": false,
                          "name": "Correct for drift and reset drift tracking variables",
                          "source": "",
                          "type": "BuiltinCommonInstructions::Group",
                          "events": [
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Move to correct drift from previous shake",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_PowerAngle",
                                    "!=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "RotateCamera"
                                  },
                                  "parameters": [
                                    "",
                                    "-",
                                    "GlobalVariable(__CameraShake_AngleTravelled)",
                                    "GlobalVariableString(__CameraShake_Layer)",
                                    "GlobalVariable(__CameraShake_Camera)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "VarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_PowerZoom",
                                    "!=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ZoomCamera"
                                  },
                                  "parameters": [
                                    "",
                                    "CameraZoom(GlobalVariableString(__CameraShake_Layer),GlobalVariable(__CameraShake_Camera)) - GlobalVariable(__CameraShake_ZoomTravelled)",
                                    "GlobalVariableString(__CameraShake_Layer)",
                                    "GlobalVariable(__CameraShake_Camera)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "BuiltinCommonInstructions::Or"
                                  },
                                  "parameters": [],
                                  "subInstructions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_PowerX",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarGlobal"
                                      },
                                      "parameters": [
                                        "__CameraShake_PowerY",
                                        "!=",
                                        "0"
                                      ],
                                      "subInstructions": []
                                    }
                                  ]
                                }
                              ],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SetCameraX"
                                  },
                                  "parameters": [
                                    "Object",
                                    "-",
                                    "GlobalVariable(__CameraShake_DisplacementTravelledX)",
                                    "GlobalVariableString(__CameraShake_Layer)",
                                    "GlobalVariable(__CameraShake_Camera)"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "SetCameraY"
                                  },
                                  "parameters": [
                                    "Object",
                                    "-",
                                    "GlobalVariable(__CameraShake_DisplacementTravelledY)",
                                    "GlobalVariableString(__CameraShake_Layer)",
                                    "GlobalVariable(__CameraShake_Camera)"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Comment",
                              "color": {
                                "b": 109,
                                "g": 230,
                                "r": 255,
                                "textB": 0,
                                "textG": 0,
                                "textR": 0
                              },
                              "comment": "Reset drift detection variables",
                              "comment2": ""
                            },
                            {
                              "disabled": false,
                              "folded": false,
                              "type": "BuiltinCommonInstructions::Standard",
                              "conditions": [],
                              "actions": [
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_DisplacementTravelledX",
                                    "=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_DisplacementTravelledY",
                                    "=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_AngleTravelled",
                                    "=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_ZoomTravelled",
                                    "=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                },
                                {
                                  "type": {
                                    "inverted": false,
                                    "value": "ModVarGlobal"
                                  },
                                  "parameters": [
                                    "__CameraShake_ShakeCounter",
                                    "=",
                                    "0"
                                  ],
                                  "subInstructions": []
                                }
                              ],
                              "events": []
                            }
                          ],
                          "parameters": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Check if camera is shaking.",
          "fullName": "Check if camera is shaking",
          "functionType": "Condition",
          "name": "IsShaking",
          "private": false,
          "sentence": " Camera is shaking",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "VarGlobal"
                  },
                  "parameters": [
                    "__CameraShake_ShakeInProgress",
                    "=",
                    "1"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Stop shaking the camera.",
          "fullName": "Stop shaking the camera",
          "functionType": "Action",
          "name": "StopShaking",
          "private": false,
          "sentence": "Stop shaking the camera",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "CameraShake::IsShaking"
                  },
                  "parameters": [
                    "",
                    ""
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "ModVarGlobal"
                  },
                  "parameters": [
                    "__CameraShake_ShakeInProgress",
                    "=",
                    "-1"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    },
    {
      "author": "",
      "description": "Move camera to the room that contains the trigger object (usually the player).  If desired, change zoom to show the entire room or keep zoom static.\n\nHow to use:\n- Place room objects on scene\n- Select camera zoom limits, how fast the camera should move, and the visible buffer around each room\n- Run the \"Move and zoom camera\" action on every frame\n- Move the trigger object (player) between rooms and the camera will center on the room that contains the trigger object.\n\nTips:\n- Use these conditions for custom logic when changing rooms : \"Camera moving\", \"Camera zooming\", and \"Room changed\"\n- Set \"Lerp Speed\" to \"1\" to change the camera instantly",
      "extensionNamespace": "",
      "fullName": "Room-based camera movement",
      "helpPath": "",
      "iconUrl": "",
      "name": "RoomBasedCameraMovement",
      "previewIconUrl": "",
      "shortDescription": "Move and zoom camera to the room object that contains the trigger object (usually the player).",
      "version": "1.0.2",
      "tags": [
        ""
      ],
      "authorIds": [],
      "dependencies": [],
      "eventsFunctions": [
        {
          "description": "Move and zoom camera to the room object that contains the trigger object (usually the player).",
          "fullName": "Move and zoom camera to the room object that contains the trigger object (player)",
          "functionType": "Action",
          "name": "MoveCameraToActiveRoom",
          "private": false,
          "sentence": "Move camera to room object _PARAM1_ that contains trigger object _PARAM2_ (Layer: _PARAM3_, Lerp speed: _PARAM4_, Max zoom: _PARAM5_, Min zoom: _PARAM6_, Border buffer: _PARAM7_px)",
          "events": [
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Initialize",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Save input values",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.MaxZoom",
                        "=",
                        "GetArgumentAsNumber(\"MaxZoom\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.LerpSpeed",
                        "=",
                        "GetArgumentAsNumber(\"LerpSpeed\")"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Comment",
                  "color": {
                    "b": 109,
                    "g": 230,
                    "r": 255,
                    "textB": 0,
                    "textG": 0,
                    "textR": 0
                  },
                  "comment": "Set default values if none provided",
                  "comment2": ""
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.MaxZoom",
                        "<=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.MaxZoom",
                        "=",
                        "1"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                },
                {
                  "disabled": false,
                  "folded": false,
                  "type": "BuiltinCommonInstructions::Standard",
                  "conditions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "VarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.LerpSpeed",
                        "<=",
                        "0"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "actions": [
                    {
                      "type": {
                        "inverted": false,
                        "value": "ModVarScene"
                      },
                      "parameters": [
                        "__RoomBasedCameraMovement.LerpSpeed",
                        "=",
                        "0.1"
                      ],
                      "subInstructions": []
                    }
                  ],
                  "events": []
                }
              ],
              "parameters": []
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Main",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Identify the current room",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Detect which room is the current one",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "CollisionPoint"
                          },
                          "parameters": [
                            "RoomObject",
                            "TriggerObject.CenterX()",
                            "TriggerObject.CenterY()"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Room has NOT changed",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "TriggerObject",
                                "__RoomBasedCameraMovement.CurrentRoomID",
                                "=",
                                "RoomObject.Variable(__RoomBasedCameraMovement.RoomID)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "SetObjectVariableAsBoolean"
                              },
                              "parameters": [
                                "TriggerObject",
                                "__RoomBasedCameraMovement.RoomChanged",
                                "False"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Room has changed",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "TriggerObject",
                                "__RoomBasedCameraMovement.CurrentRoomID",
                                "!=",
                                "RoomObject.Variable(__RoomBasedCameraMovement.RoomID)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "SetObjectVariableAsBoolean"
                              },
                              "parameters": [
                                "TriggerObject",
                                "__RoomBasedCameraMovement.RoomChanged",
                                "True"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Update CurrentRoomID variable",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "TriggerObject",
                                "__RoomBasedCameraMovement.CurrentRoomID",
                                "=",
                                "RoomObject.Variable(__RoomBasedCameraMovement.RoomID)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Move camera",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::ForEach",
                      "object": "RoomObject",
                      "conditions": [],
                      "actions": [],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Assign each room a unique ID if they don't have one yet",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "RoomObject",
                                "__RoomBasedCameraMovement.RoomID",
                                "=",
                                "0"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.MaxRoomID",
                                "+",
                                "1"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarObjet"
                              },
                              "parameters": [
                                "RoomObject",
                                "__RoomBasedCameraMovement.RoomID",
                                "=",
                                "Variable(__RoomBasedCameraMovement.MaxRoomID)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Check if this room is the current room",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarObjet"
                              },
                              "parameters": [
                                "RoomObject",
                                "__RoomBasedCameraMovement.RoomID",
                                "=",
                                "TriggerObject.Variable(__RoomBasedCameraMovement.CurrentRoomID)"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "actions": [],
                          "events": [
                            {
                              "colorB": 228,
                              "colorG": 176,
                              "colorR": 74,
                              "creationTime": 0,
                              "disabled": false,
                              "folded": false,
                              "name": "Change zoom",
                              "source": "",
                              "type": "BuiltinCommonInstructions::Group",
                              "events": [
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Calculate the camera dimensions",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ModVarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraWidth",
                                        "=",
                                        "RoomObject.Width()+2*GetArgumentAsNumber(\"OutsideBuffer\")"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ModVarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraHeight",
                                        "=",
                                        "RoomObject.Height()+2*GetArgumentAsNumber(\"OutsideBuffer\")"
                                      ],
                                      "subInstructions": []
                                    },
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ModVarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraZoom",
                                        "=",
                                        "min(SceneWindowHeight() / Variable(__RoomBasedCameraMovement.CameraHeight), SceneWindowWidth() / Variable(__RoomBasedCameraMovement.CameraWidth))"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Adjust zoom to stay within min/max values",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ModVarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraZoom",
                                        "=",
                                        "clamp(Variable(__RoomBasedCameraMovement.CameraZoom),GetArgumentAsNumber(\"MinZoom\"),Variable(__RoomBasedCameraMovement.MaxZoom))"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "Change camera zoom",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "ZoomCamera"
                                      },
                                      "parameters": [
                                        "",
                                        "ceil(lerp(CameraZoom(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\")),Variable(__RoomBasedCameraMovement.CameraZoom),Variable(__RoomBasedCameraMovement.LerpSpeed))*1000)/1000",
                                        "GetArgumentAsString(\"Layer\")",
                                        "GetArgumentAsNumber(\"Camera\")"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ],
                              "parameters": []
                            },
                            {
                              "colorB": 228,
                              "colorG": 176,
                              "colorR": 74,
                              "creationTime": 0,
                              "disabled": false,
                              "folded": false,
                              "name": "Move camera position",
                              "source": "",
                              "type": "BuiltinCommonInstructions::Group",
                              "events": [
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "For rooms smaller than the viewable screen, center the camera on the center of the room",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraWidth",
                                        "<=",
                                        "SceneWindowWidth()"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetCameraX"
                                      },
                                      "parameters": [
                                        "",
                                        "=",
                                        "ceil(lerp(CameraX(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\")), RoomObject.CenterX(), Variable(__RoomBasedCameraMovement.LerpSpeed))*100)/100",
                                        "GetArgumentAsString(\"Layer\")",
                                        "GetArgumentAsNumber(\"Camera\")"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraHeight",
                                        "<=",
                                        "SceneWindowHeight()"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetCameraY"
                                      },
                                      "parameters": [
                                        "",
                                        "=",
                                        "ceil(lerp(CameraY(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\")), RoomObject.CenterY(), Variable(__RoomBasedCameraMovement.LerpSpeed))*100)/100",
                                        "GetArgumentAsString(\"Layer\")",
                                        "GetArgumentAsNumber(\"Camera\")"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Comment",
                                  "color": {
                                    "b": 109,
                                    "g": 230,
                                    "r": 255,
                                    "textB": 0,
                                    "textG": 0,
                                    "textR": 0
                                  },
                                  "comment": "For rooms larger than the viewable screen, center the camera on the TriggerObject and clamp camera so it only shows the room + buffer",
                                  "comment2": ""
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraWidth",
                                        ">",
                                        "SceneWindowWidth()"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetCameraX"
                                      },
                                      "parameters": [
                                        "",
                                        "=",
                                        "ceil(lerp(CameraX(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\")), clamp(TriggerObject.CenterX(), \nRoomObject.CenterX() - RoomObject.Width()/2 + SceneWindowWidth()/2 - GetArgumentAsNumber(\"OutsideBuffer\"), RoomObject.CenterX() + RoomObject.Width()/2 - SceneWindowWidth()/2 + GetArgumentAsNumber(\"OutsideBuffer\")), Variable(__RoomBasedCameraMovement.LerpSpeed))*100)/100",
                                        "GetArgumentAsString(\"Layer\")",
                                        "GetArgumentAsNumber(\"Camera\")"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                },
                                {
                                  "disabled": false,
                                  "folded": false,
                                  "type": "BuiltinCommonInstructions::Standard",
                                  "conditions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "VarScene"
                                      },
                                      "parameters": [
                                        "__RoomBasedCameraMovement.CameraHeight",
                                        ">",
                                        "SceneWindowHeight()"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "actions": [
                                    {
                                      "type": {
                                        "inverted": false,
                                        "value": "SetCameraY"
                                      },
                                      "parameters": [
                                        "",
                                        "=",
                                        "ceil(lerp(CameraY(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\")), clamp(TriggerObject.CenterY(), \nRoomObject.CenterY() - RoomObject.Height()/2 + SceneWindowHeight()/2 - GetArgumentAsNumber(\"OutsideBuffer\"), RoomObject.CenterY() + RoomObject.Height()/2 - SceneWindowHeight()/2 + GetArgumentAsNumber(\"OutsideBuffer\")), Variable(__RoomBasedCameraMovement.LerpSpeed))*100)/100",
                                        "GetArgumentAsString(\"Layer\")",
                                        "GetArgumentAsNumber(\"Camera\")"
                                      ],
                                      "subInstructions": []
                                    }
                                  ],
                                  "events": []
                                }
                              ],
                              "parameters": []
                            }
                          ]
                        }
                      ]
                    }
                  ],
                  "parameters": []
                }
              ],
              "parameters": []
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Calculate \"IsCameraMoving\" condition",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Initialize",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraX",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraY",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraX",
                            "=",
                            "CameraX(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraY",
                            "=",
                            "CameraY(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Check if camera position changed",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Camera has NOT moved",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraX",
                            "=",
                            "CameraX(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        },
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PrevCameraY",
                            "=",
                            "CameraY(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.CameraMoving",
                            "False"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Camera has moved",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "BuiltinCommonInstructions::Or"
                          },
                          "parameters": [],
                          "subInstructions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.PrevCameraX",
                                "!=",
                                "CameraX(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "VarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.PrevCameraY",
                                "!=",
                                "CameraY(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                              ],
                              "subInstructions": []
                            }
                          ]
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.CameraMoving",
                            "True"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Update with current camera position",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.PrevCameraX",
                                "=",
                                "CameraX(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                              ],
                              "subInstructions": []
                            },
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.PrevCameraY",
                                "=",
                                "CameraY(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                }
              ],
              "parameters": []
            },
            {
              "colorB": 228,
              "colorG": 176,
              "colorR": 74,
              "creationTime": 0,
              "disabled": false,
              "folded": false,
              "name": "Calculate \"IsCameraZooming\" condition",
              "source": "",
              "type": "BuiltinCommonInstructions::Group",
              "events": [
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Initialize",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PreviousZoom",
                            "=",
                            "0"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "ModVarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PreviousZoom",
                            "=",
                            "CameraZoom(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    }
                  ],
                  "parameters": []
                },
                {
                  "colorB": 228,
                  "colorG": 176,
                  "colorR": 74,
                  "creationTime": 0,
                  "disabled": false,
                  "folded": false,
                  "name": "Check if camera zoom changed",
                  "source": "",
                  "type": "BuiltinCommonInstructions::Group",
                  "events": [
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Camera zoom has NOT changed",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PreviousZoom",
                            "=",
                            "CameraZoom(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.CameraZooming",
                            "False"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": []
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Comment",
                      "color": {
                        "b": 109,
                        "g": 230,
                        "r": 255,
                        "textB": 0,
                        "textG": 0,
                        "textR": 0
                      },
                      "comment": "Camera zoom has changed",
                      "comment2": ""
                    },
                    {
                      "disabled": false,
                      "folded": false,
                      "type": "BuiltinCommonInstructions::Standard",
                      "conditions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "VarScene"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.PreviousZoom",
                            "!=",
                            "CameraZoom(GetArgumentAsString(\"Layer\"),GetArgumentAsNumber(\"Camera\"))"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "actions": [
                        {
                          "type": {
                            "inverted": false,
                            "value": "SetSceneVariableAsBoolean"
                          },
                          "parameters": [
                            "__RoomBasedCameraMovement.CameraZooming",
                            "True"
                          ],
                          "subInstructions": []
                        }
                      ],
                      "events": [
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Comment",
                          "color": {
                            "b": 109,
                            "g": 230,
                            "r": 255,
                            "textB": 0,
                            "textG": 0,
                            "textR": 0
                          },
                          "comment": "Update with current camera zoom",
                          "comment2": ""
                        },
                        {
                          "disabled": false,
                          "folded": false,
                          "type": "BuiltinCommonInstructions::Standard",
                          "conditions": [],
                          "actions": [
                            {
                              "type": {
                                "inverted": false,
                                "value": "ModVarScene"
                              },
                              "parameters": [
                                "__RoomBasedCameraMovement.PreviousZoom",
                                "=",
                                "CameraZoom(GetArgumentAsString(\"Layer\"), GetArgumentAsNumber(\"Camera\"))"
                              ],
                              "subInstructions": []
                            }
                          ],
                          "events": []
                        }
                      ]
                    }
                  ],
                  "parameters": []
                }
              ],
              "parameters": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Room object",
              "longDescription": "Room objects are used to mark areas that should be seen by the camera.",
              "name": "RoomObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Trigger object (player)",
              "longDescription": "When the Trigger Object touches a new Room Object, the camera will move to the new room",
              "name": "TriggerObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Layer",
              "longDescription": "",
              "name": "Layer",
              "optional": false,
              "supplementaryInformation": "",
              "type": "layer"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Lerp speed",
              "longDescription": "Range: 0 to 1",
              "name": "LerpSpeed",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Maximum zoom",
              "longDescription": "",
              "name": "MaxZoom",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Minimum zoom",
              "longDescription": "",
              "name": "MinZoom",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Outside buffer (pixels)",
              "longDescription": "Minimum extra space displayed around each side the room",
              "name": "OutsideBuffer",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            },
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Camera",
              "longDescription": "",
              "name": "Camera",
              "optional": false,
              "supplementaryInformation": "",
              "type": "expression"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if trigger object (usually the player) has entered a new room on this frame.",
          "fullName": "Check if trigger object (player) has entered a new room",
          "functionType": "Condition",
          "name": "ActiveRoomChanged",
          "private": false,
          "sentence": "_PARAM1_ has just entered a new room",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "ObjectVariableAsBoolean"
                  },
                  "parameters": [
                    "TriggerObject",
                    "__RoomBasedCameraMovement.RoomChanged",
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [
            {
              "codeOnly": false,
              "defaultValue": "",
              "description": "Trigger object (player)",
              "longDescription": "",
              "name": "TriggerObject",
              "optional": false,
              "supplementaryInformation": "",
              "type": "objectList"
            }
          ],
          "objectGroups": []
        },
        {
          "description": "Check if camera is zooming (requires the use of \"Move and zoom camera\" action in this extension).",
          "fullName": "Check if camera is zooming",
          "functionType": "Condition",
          "name": "IsCameraZooming",
          "private": false,
          "sentence": "Camera is zooming",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SceneVariableAsBoolean"
                  },
                  "parameters": [
                    "__RoomBasedCameraMovement.CameraZooming",
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        },
        {
          "description": "Check if camera is moving (requires the use of \"Move and zoom camera\" action in this extension).",
          "fullName": "Check if camera is moving",
          "functionType": "Condition",
          "name": "IsCameraMoving",
          "private": false,
          "sentence": "Camera is moving",
          "events": [
            {
              "disabled": false,
              "folded": false,
              "type": "BuiltinCommonInstructions::Standard",
              "conditions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SceneVariableAsBoolean"
                  },
                  "parameters": [
                    "__RoomBasedCameraMovement.CameraMoving",
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "actions": [
                {
                  "type": {
                    "inverted": false,
                    "value": "SetReturnBoolean"
                  },
                  "parameters": [
                    "True"
                  ],
                  "subInstructions": []
                }
              ],
              "events": []
            }
          ],
          "parameters": [],
          "objectGroups": []
        }
      ],
      "eventsBasedBehaviors": []
    }
  ],
  "externalLayouts": [],
  "externalSourceFiles": []
}